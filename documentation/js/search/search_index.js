var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppConfigModule.html",[0,1.14,1,1.965]],["body/modules/AppConfigModule.html",[0,1.678,1,3.723,2,1.649,3,2.485,4,3.301,5,3.301,6,3.301,7,3.134,8,0.024,9,2.89,10,2.201,11,2.201,12,0.28,13,0.184,14,0.247,15,2.914,16,2.914,17,3.889,18,2.674,19,2.89,20,0.909,21,5.107,22,0.772,23,3.301,24,3.889,25,3.889,26,2.914,27,3.826,28,3.889,29,2.201,30,3.889,31,3.889,32,2.625,33,3.301,34,0.28,35,0.5,36,0.017,37,0.017]],["title/injectables/AppConfigService.html",[7,1.575,38,0.736]],["body/injectables/AppConfigService.html",[7,2.071,8,0.024,12,0.237,13,0.156,14,0.209,15,4.45,16,4.45,20,0.685,22,0.654,26,2.467,34,0.237,35,0.423,36,0.015,37,0.015,38,0.967,39,1.308,40,2.795,41,0.326,42,0.847,43,2.376,44,1.951,45,2.566,46,1.325,47,5.655,48,1.724,49,2.795,50,5.655,51,1.45,52,4.564,53,1.721,54,1.721,55,0.673,56,1.343,57,2.39,58,4.564,59,1.22,60,3.293,61,1.7,62,1.245,63,4.564,64,1.431,65,3.293,66,2.222,67,1.396,68,1.7,69,4.564,70,1.602,71,1.082,72,3.293,73,3.293,74,3.293,75,3.293]],["title/controllers/AppController.html",[76,1.689,77,2.343]],["body/controllers/AppController.html",[8,0.024,12,0.318,13,0.209,14,0.281,20,0.832,22,0.877,34,0.318,35,0.568,36,0.019,37,0.019,41,0.437,44,1.645,46,1.609,51,1.133,59,1.1,62,1.205,70,2.149,71,1.451,76,2.696,77,3.739,78,2.313,79,3.749,80,5.389,81,2.718,82,4.417,83,3.427,84,3.749,85,4.417]],["title/modules/AppModule.html",[0,1.14,86,2.343]],["body/modules/AppModule.html",[0,1.381,1,3.349,2,1.242,3,2.045,8,0.024,9,2.379,10,1.658,11,1.658,12,0.211,13,0.139,14,0.186,18,2.201,20,0.979,22,0.582,29,2.379,32,1.977,34,0.211,35,0.377,36,0.014,37,0.014,57,1.534,68,1.091,77,3.317,78,2.201,83,3.349,84,2.487,86,4.577,87,2.487,88,2.487,89,2.487,90,3.099,91,3.642,92,3.349,93,3.349,94,2.93,95,4.203,96,2.93,97,1.977,98,1.329,99,2.195,100,1.329,101,1.658,102,2.487,103,1.803,104,2.487,105,1.977,106,2.93,107,4.915,108,4.203,109,2.487,110,2.487,111,2.836,112,2.93,113,2.836,114,2.93,115,2.93,116,3.317,117,2.93,118,2.93,119,3.149]],["title/injectables/AppService.html",[38,0.736,83,1.965]],["body/injectables/AppService.html",[8,0.024,12,0.334,13,0.22,14,0.295,20,0.696,22,0.921,34,0.334,35,0.596,36,0.019,37,0.019,38,1.211,39,1.843,41,0.459,46,1.659,51,1.19,59,1.134,62,1.266,71,1.524,80,5.484,83,3.234,120,3.939,121,4.64,122,4.64,123,4.64]],["title/modules/DbModule.html",[0,1.14,124,2.136]],["body/modules/DbModule.html",[0,1.726,1,2.973,2,1.722,7,2.641,8,0.024,12,0.292,13,0.192,14,0.258,18,2.127,19,2.299,20,0.924,22,0.806,29,2.973,34,0.292,35,0.522,36,0.018,37,0.018,57,2.751,103,2.5,116,2.741,119,3.043,124,3.233,125,3.043,126,5.253,127,3.043,128,2.973,129,4.061,130,1.722,131,4.362,132,2.127,133,4.061,134,3.043,135,2.299,136,3.447,137,4.061,138,2.741]],["title/injectables/DbService.html",[38,0.736,128,1.965]],["body/injectables/DbService.html",[8,0.024,12,0.163,13,0.107,14,0.144,20,0.809,22,0.451,34,0.163,35,0.292,36,0.012,37,0.012,38,0.737,39,0.902,41,0.609,42,0.646,43,1.918,44,1.765,45,2.15,46,1.01,48,1.189,51,1.215,53,1.389,54,1.389,55,0.544,56,1.084,59,1.178,62,0.949,64,0.547,67,0.963,68,1.296,70,1.105,71,1.389,127,1.701,128,1.969,130,1.793,132,1.822,135,3.051,139,1.927,140,2.953,141,2.892,142,2.271,143,5.39,144,3.479,145,2.953,146,2.271,147,3.198,148,2.917,149,2.348,150,2.271,151,2.141,152,3.479,153,1.397,154,1.927,155,1.189,156,1.397,157,0.846,158,1.296,159,2.271,160,1.927,161,1.532,162,0.367,163,1.285,164,2.141,165,4.739,166,4.228,167,1.969,168,2.602,169,2.141,170,2.271,171,1.969,172,1.969,173,1.822,174,3.479,175,1.822,176,2.141,177,2.271,178,3.479,179,2.271,180,2.271,181,2.271,182,0.846,183,0.892,184,2.271,185,1.927,186,1.969,187,0.846,188,2.271,189,0.902,190,0.902,191,2.271,192,1.03,193,2.271,194,2.271,195,2.271,196,2.271,197,0.846,198,2.271]],["title/interfaces/DbServiceInterface.html",[132,1.818,162,0.56]],["body/interfaces/DbServiceInterface.html",[8,0.023,12,0.284,13,0.187,14,0.251,20,0.593,34,0.284,36,0.017,37,0.017,41,0.653,46,1.498,51,1.323,53,1.695,54,1.695,55,0.663,56,1.323,59,1.344,62,1.408,132,2.701,140,4.379,141,2.92,145,4.379,147,2.666,148,3.748,149,3.481,151,2.431,157,1.471,158,1.471,161,3.877,162,0.638,199,1.471,200,4.876,201,3.353,202,3.95,203,3.95,204,3.95]],["title/interfaces/Entity.html",[157,1.293,162,0.56]],["body/interfaces/Entity.html",[8,0.024,12,0.227,13,0.242,14,0.2,34,0.457,36,0.015,37,0.015,41,0.311,42,0.821,55,0.779,56,1.554,59,1.353,61,1.173,64,0.758,157,1.905,158,1.173,162,1.026,182,2.176,183,1.498,187,2.176,189,2.564,190,1.251,192,2.651,197,2.066,199,1.173,205,1.429,206,2.985,207,1.876,208,1.532,209,1.532,210,1.532,211,1.532,212,1.876,213,1.532,214,1.532,215,1.532,216,2.352,217,1.532,218,1.335,219,1.532,220,1.532,221,1.429,222,1.532]],["title/interfaces/Hit.html",[162,0.56,212,1.472]],["body/interfaces/Hit.html",[8,0.024,12,0.232,13,0.279,14,0.205,34,0.46,36,0.015,37,0.015,41,0.319,42,0.836,55,0.721,59,1.341,61,1.203,64,0.778,157,1.677,158,1.203,162,1.032,182,1.677,183,1.155,187,2.197,189,2.64,190,1.283,192,2.676,197,1.203,199,1.203,205,1.465,207,1.91,208,1.572,209,1.572,210,1.572,211,1.572,212,2.198,213,2.729,214,2.729,215,2.729,216,2.378,217,1.572,218,1.37,219,1.572,220,1.572,221,1.465,222,1.572]],["title/interfaces/Hits.html",[162,0.56,216,1.472]],["body/interfaces/Hits.html",[8,0.024,12,0.238,13,0.248,14,0.21,34,0.463,36,0.015,37,0.015,41,0.327,42,0.849,55,0.674,59,1.296,61,1.23,64,0.796,157,1.704,158,1.23,162,1.038,182,1.704,183,1.173,187,2.461,189,2.651,190,1.312,192,2.075,197,1.23,199,1.23,205,1.499,207,1.94,208,1.608,209,1.608,210,1.608,211,1.608,212,2.402,213,1.608,214,1.608,215,1.608,216,2.726,217,2.756,218,1.401,219,1.608,220,1.608,221,1.499,222,1.608]],["title/classes/HttpExceptionFilter.html",[35,0.446,223,2.601]],["body/classes/HttpExceptionFilter.html",[8,0.024,12,0.213,13,0.14,14,0.188,20,0.742,22,0.588,32,2,34,0.213,35,0.381,36,0.014,37,0.014,41,0.293,42,0.787,43,2.244,44,1.843,45,2.449,46,1.23,51,1.087,53,0.974,54,0.974,55,0.381,56,0.76,62,0.809,64,0.714,66,2,67,1.257,68,1.579,130,2.422,163,2.399,168,2.608,172,3.056,175,2.219,183,1.384,223,3.706,224,2,225,2.516,226,4.947,227,4.238,228,2.964,229,4.238,230,5.398,231,4.947,232,5.398,233,2.964,234,2.964,235,4.238,236,2.516,237,3.597,238,2.964,239,2.964,240,2.964,241,2.964,242,2.964,243,5.94,244,2.964,245,2.964,246,2.221,247,4.947,248,4.238,249,4.238,250,2.964,251,4.238,252,2.964,253,4.238,254,4.238,255,4.238,256,2.964,257,2.964,258,2.964,259,2.964,260,2.964,261,2.964,262,2.964,263,2.964,264,2.964,265,2.964,266,2.964,267,2.964]],["title/modules/KafkaClientModule.html",[0,1.14,90,1.818]],["body/modules/KafkaClientModule.html",[0,1.866,2,1.637,8,0.024,12,0.278,13,0.183,14,0.245,18,2.021,19,2.184,20,0.852,22,0.766,34,0.366,35,0.496,36,0.017,37,0.017,46,1.12,51,0.99,62,1.053,71,1.669,90,2.974,97,3.429,98,2.577,116,2.605,130,1.637,134,2.892,138,2.605,268,2.876,269,2.892,270,5.081,271,5.68,272,3.859,273,5.68,274,4.313,275,3.372,276,2.892,277,3.807,278,3.859,279,3.807,280,3.276]],["title/injectables/KafkaClientService.html",[38,0.736,275,1.818]],["body/injectables/KafkaClientService.html",[7,2.459,8,0.024,12,0.215,13,0.141,14,0.19,20,0.746,22,0.594,34,0.215,35,0.384,36,0.014,37,0.014,38,0.904,39,1.188,41,0.296,42,0.792,43,2.703,44,2.019,45,2.459,46,1.238,48,1.566,49,2.538,51,1.528,53,0.982,54,0.982,55,0.548,56,0.767,57,2.603,62,1.357,64,0.72,66,2.878,67,1.268,68,1.852,70,1.455,71,1.401,98,2.782,103,1.84,130,1.268,268,3.471,275,2.233,281,2.538,282,4.22,283,5.42,284,5.42,285,5.42,286,4.265,287,2.99,288,4.22,289,2.99,290,3.372,291,2.99,292,2.99,293,4.265,294,2.018,295,2.99,296,2.99,297,4.265,298,2.538,299,2.99,300,4.265,301,2.99,302,2.99,303,2.99,304,2.99,305,2.99]],["title/modules/KafkaConsumerModule.html",[0,1.14,91,2.136]],["body/modules/KafkaConsumerModule.html",[0,1.574,2,1.499,3,2.332,8,0.024,9,2.712,10,2.001,11,2.001,12,0.254,13,0.167,14,0.225,18,2.509,19,2.712,20,0.914,22,0.702,29,2.712,34,0.254,35,0.454,36,0.016,37,0.016,90,3.189,91,4.217,92,3.554,93,3.554,97,2.386,98,1.604,99,2.649,100,1.604,101,2.001,102,3.001,104,3.001,105,3.233,110,3.001,306,3.001,307,3.535,308,3.001,309,3.001,310,4.19,311,2.649,312,3.535,313,3.535,314,3.001]],["title/injectables/KafkaConsumerService.html",[38,0.736,310,2.136]],["body/injectables/KafkaConsumerService.html",[7,1.867,8,0.024,12,0.127,13,0.083,14,0.112,20,0.764,22,0.349,34,0.127,35,0.226,36,0.01,37,0.01,38,0.603,39,0.699,41,0.174,42,0.528,43,2.483,44,1.801,45,1.867,46,0.826,48,1.49,51,1.24,53,0.935,54,0.935,55,0.461,56,0.73,57,2.155,59,0.96,62,0.777,64,0.863,67,1.519,68,1.533,97,1.188,98,0.798,100,0.798,103,1.083,105,3.435,130,1.745,135,2.999,148,1.752,155,1.876,156,1.083,163,0.996,164,2.205,167,0.996,169,2.781,171,0.996,172,2.028,173,2.367,175,2.367,176,1.083,183,1.055,186,1.611,221,1.626,246,2.132,275,2.532,276,1.319,290,2.028,294,1.188,310,3.261,311,3.813,315,1.494,316,5.089,317,4.645,318,4.519,319,4.32,320,1.494,321,2.774,322,2.846,323,2.846,324,4.771,325,3.494,326,1.76,327,4.211,328,1.76,329,1.76,330,3.583,331,2.846,332,1.76,333,1.385,334,1.083,335,1.319,336,1.76,337,1.76,338,1.76,339,1.76,340,1.76,341,1.76,342,1.76,343,1.76,344,3.041,345,1.494,346,2.416,347,4.116,348,1.76,349,1.76,350,1.76,351,1.76,352,1.494,353,1.494,354,1.76,355,1.76,356,3.836,357,1.76,358,1.76,359,1.319,360,2.846,361,1.76,362,1.76,363,1.76,364,1.319,365,1.76,366,1.494,367,1.083,368,1.494,369,1.76,370,1.76]],["title/controllers/KafkaProducerController.html",[76,1.689,371,2.343]],["body/controllers/KafkaProducerController.html",[8,0.024,12,0.281,13,0.185,14,0.248,20,0.857,22,0.775,34,0.281,35,0.502,36,0.017,37,0.017,41,0.386,44,1.454,46,1.486,51,1.001,53,1.283,54,1.283,55,0.502,56,1.001,62,1.065,70,1.9,71,1.283,76,1.9,78,2.044,81,2.403,100,2.323,101,3.233,147,3.855,148,3.151,367,2.403,371,3.455,372,2.898,373,3.314,374,3.314,375,2.635,376,4.345,377,3.904,378,4.092,379,5.712,380,3.904,381,3.233,382,3.314,383,2.925,384,3.904,385,3.904,386,3.904,387,3.904]],["title/modules/KafkaProducerModule.html",[0,1.14,92,1.965]],["body/modules/KafkaProducerModule.html",[0,1.64,2,1.594,3,2.43,8,0.024,9,2.826,10,2.128,11,2.128,12,0.271,13,0.178,14,0.239,18,2.615,19,2.826,20,0.896,22,0.746,29,2.826,34,0.271,35,0.483,36,0.017,37,0.017,78,2.615,90,3.256,92,3.795,98,1.705,99,2.816,100,2.265,101,3.173,268,2.128,314,3.191,371,3.783,372,2.128,381,3.89,382,3.191,388,3.191,389,3.191,390,3.759,391,3.191,392,3.759,393,3.759]],["title/injectables/KafkaProducerService.html",[38,0.736,381,1.965]],["body/injectables/KafkaProducerService.html",[7,2.031,8,0.024,12,0.147,13,0.097,14,0.13,20,0.81,22,0.405,34,0.147,35,0.262,36,0.011,37,0.011,38,0.679,39,0.811,41,0.202,42,0.595,43,2.668,44,1.811,45,2.031,46,0.93,48,1.069,51,1.323,53,1.052,54,1.052,55,0.508,56,0.821,57,2.344,61,0.76,62,1.079,64,0.771,67,0.866,68,1.193,70,0.993,71,0.671,98,0.926,100,0.926,101,3.054,103,1.256,130,1.676,135,3.253,148,2.755,155,1.069,156,1.256,163,1.155,164,2.433,167,1.155,168,1.971,169,2.433,171,1.155,172,2.237,173,2.344,175,2.344,176,2.433,183,1.247,186,1.155,246,1.529,268,1.155,275,2.702,276,1.529,290,2.237,294,1.377,319,4.581,320,1.732,327,4.405,333,2.178,334,1.256,344,2.718,345,1.732,346,4.878,352,1.732,353,1.732,372,3.054,375,3.878,376,4.743,381,2.753,394,1.732,395,3.203,396,2.041,397,2.041,398,3.203,399,2.041,400,3.203,401,2.041,402,2.041,403,2.041,404,3.203,405,2.041,406,2.041,407,3.203,408,3.203,409,2.041,410,2.041,411,2.041,412,3.203,413,3.953,414,2.041,415,1.732,416,2.041]],["title/interfaces/LogBody.html",[153,2.136,162,0.56]],["body/interfaces/LogBody.html",[8,0.023,12,0.314,13,0.206,14,0.277,34,0.314,36,0.019,37,0.019,41,0.431,42,1.02,55,0.837,56,1.409,59,1.34,61,1.624,153,3.382,162,0.704,182,2.354,183,1.62,197,2.354,199,1.624,206,3.709,417,3.266,418,3.7]],["title/classes/LogDto.html",[35,0.446,333,1.689]],["body/classes/LogDto.html",[8,0.024,12,0.285,13,0.188,14,0.252,20,0.595,34,0.285,35,0.665,36,0.017,37,0.017,41,0.392,42,0.96,51,1.476,55,0.784,56,1.326,59,1.256,61,1.477,81,3.542,182,2.144,183,1.476,197,2.144,206,2.676,224,2.676,333,2.517,372,3.453,419,3.366,420,5.37,421,3.966,422,3.966,423,3.366,424,3.966,425,5.172,426,5.172,427,3.366]],["title/injectables/LogProvider.html",[38,0.736,428,1.965]],["body/injectables/LogProvider.html",[8,0.024,12,0.197,13,0.129,14,0.174,20,0.78,22,0.542,34,0.197,35,0.351,36,0.014,37,0.014,38,0.847,39,1.085,41,0.27,42,0.742,43,2.358,44,1.936,45,2.358,46,1.16,48,1.43,51,1.333,53,1.552,54,1.552,55,0.607,56,1.211,59,0.938,62,1.09,64,0.658,67,1.158,68,1.488,71,1.312,100,1.239,128,2.261,130,1.694,132,2.721,135,3.269,138,1.843,141,3.13,149,2.696,151,1.681,155,1.43,156,1.681,160,2.318,161,1.843,162,0.441,164,2.459,167,2.261,168,3.198,169,2.459,171,2.261,172,2.261,173,2.092,175,2.092,176,2.459,186,1.546,333,2.529,334,1.681,359,2.993,364,2.993,428,2.261,429,2.318,430,4.694,431,2.731,432,3.995,433,2.731,434,2.731,435,3.995,436,2.731,437,5.197,438,2.731,439,2.696,440,3.995,441,2.731]],["title/interfaces/LogSearchResult.html",[162,0.56,442,2.601]],["body/interfaces/LogSearchResult.html",[8,0.023,12,0.328,13,0.216,14,0.289,20,0.684,34,0.328,36,0.019,37,0.019,41,0.451,42,1.049,55,0.726,147,3.075,153,3.951,154,3.867,162,0.736,187,2.391,189,2.439,190,2.55,199,1.697,417,3.414,442,4.233,443,3.867]],["title/controllers/LogsController.html",[76,1.689,444,2.343]],["body/controllers/LogsController.html",[8,0.024,12,0.301,13,0.198,14,0.266,20,0.803,22,0.83,34,0.301,35,0.537,36,0.018,37,0.018,41,0.413,44,1.557,46,1.553,51,1.072,53,1.373,54,1.373,55,0.537,56,1.072,59,1.171,62,1.14,70,2.034,71,1.373,76,2.034,78,2.188,81,2.572,141,3.028,321,3.09,335,3.131,374,3.547,439,2.82,444,3.611,445,3.547,446,4.179,447,5.35,448,4.179,449,5.35,450,4.179,451,4.179,452,4.179,453,4.179]],["title/modules/LogsModule.html",[0,1.14,93,1.965]],["body/modules/LogsModule.html",[0,1.62,2,1.565,3,2.4,8,0.024,9,2.791,10,2.089,11,2.089,12,0.266,13,0.175,14,0.234,18,2.583,19,2.791,20,0.927,22,0.732,29,2.791,34,0.266,35,0.474,36,0.017,37,0.017,78,2.583,93,3.852,124,3.913,321,3.589,335,2.765,428,3.599,444,3.749,454,3.132,455,3.132,456,3.132,457,3.132,458,3.69,459,3.69,460,3.69,461,3.132]],["title/injectables/LogsService.html",[38,0.736,321,1.818]],["body/injectables/LogsService.html",[8,0.024,12,0.195,13,0.128,14,0.172,20,0.776,22,0.536,34,0.195,35,0.347,36,0.013,37,0.013,38,0.84,39,1.073,41,0.267,42,0.736,43,2.13,44,1.926,45,2.346,46,1.151,48,1.415,51,1.326,53,1.542,54,1.542,55,0.603,56,1.204,59,0.932,62,1.082,64,0.651,67,1.146,68,1.476,70,1.315,71,1.302,100,1.226,130,1.681,135,3.257,141,3.365,149,2.675,151,2.889,155,1.415,156,1.663,164,2.439,167,2.243,168,3.182,169,2.439,171,2.243,172,2.243,173,2.076,175,2.076,176,2.439,186,1.529,321,2.076,333,2.516,334,1.663,359,2.97,364,2.97,367,1.663,428,3.257,430,4.673,461,2.294,462,2.294,463,2.702,464,3.964,465,2.702,466,2.702,467,3.964,468,2.025,469,5.17,470,2.702,471,2.702,472,2.702,473,2.702,474,3.964,475,2.702,476,2.702]],["title/interfaces/RootObjectSearchResult.html",[162,0.56,218,1.472]],["body/interfaces/RootObjectSearchResult.html",[8,0.024,12,0.232,13,0.245,14,0.205,34,0.46,36,0.015,37,0.015,41,0.319,42,0.836,55,0.721,59,1.289,61,1.203,64,0.778,157,1.677,158,1.203,162,1.032,182,1.677,183,1.155,187,2.197,189,2.64,190,1.283,192,2.043,197,1.203,199,1.203,205,1.465,207,2.378,208,1.572,209,1.572,210,1.572,211,1.572,212,1.91,213,1.572,214,1.572,215,1.572,216,2.754,217,1.572,218,1.91,219,2.729,220,2.729,221,2.352,222,2.729]],["title/interfaces/SearchReturn.html",[158,1.293,162,0.56]],["body/interfaces/SearchReturn.html",[8,0.024,12,0.243,13,0.251,14,0.215,34,0.465,36,0.016,37,0.016,41,0.334,42,0.863,55,0.597,59,1.302,61,1.259,64,0.814,157,2.13,158,1.731,162,1.044,182,1.731,183,1.192,187,2.408,189,2.662,190,2.271,192,2.109,197,1.259,199,1.259,205,1.534,207,1.971,208,1.645,209,1.645,210,1.645,211,1.645,212,1.971,213,1.645,214,1.645,215,1.645,216,2.425,217,1.645,218,1.434,219,1.645,220,1.645,221,1.534,222,1.645]],["title/classes/SendLogRequestDto.html",[35,0.446,378,2.343]],["body/classes/SendLogRequestDto.html",[8,0.023,12,0.294,13,0.193,14,0.259,20,0.612,34,0.294,35,0.524,36,0.018,37,0.018,41,0.403,42,0.978,51,1.496,55,0.792,56,1.35,59,1.045,81,3.59,100,1.85,182,1.962,183,1.35,197,1.962,206,2.752,224,2.752,333,3.181,334,2.51,367,2.51,372,2.308,378,3.554,383,3.055,420,4.47,423,3.461,477,3.461,478,5.266,479,5.833,480,4.078,481,4.078,482,4.078]],["title/interfaces/Shards.html",[162,0.56,207,1.472]],["body/interfaces/Shards.html",[8,0.024,12,0.232,13,0.245,14,0.205,34,0.46,36,0.015,37,0.015,41,0.319,42,0.836,55,0.721,59,1.289,61,1.203,64,0.778,157,1.677,158,1.203,162,1.032,182,1.677,183,1.155,187,2.381,189,2.742,190,1.283,192,2.043,197,1.203,199,1.203,205,1.465,207,2.198,208,2.729,209,2.729,210,2.729,211,1.572,212,1.91,213,1.572,214,1.572,215,1.572,216,2.378,217,1.572,218,1.37,219,1.572,220,1.572,221,1.465,222,1.572]],["title/interfaces/Source.html",[13,0.164,162,0.56]],["body/interfaces/Source.html",[8,0.024,12,0.243,13,0.271,14,0.215,34,0.465,36,0.016,37,0.016,41,0.334,42,0.863,55,0.597,59,1.351,61,1.259,64,0.814,157,1.731,158,1.259,162,1.044,182,2.233,183,1.538,187,2.233,189,2.605,190,1.343,192,2.109,197,1.259,199,1.259,205,1.534,207,1.971,208,1.645,209,1.645,210,1.645,211,1.645,212,1.971,213,1.645,214,1.645,215,1.645,216,2.425,217,1.645,218,1.434,219,1.645,220,1.645,221,1.534,222,1.645]],["title/injectables/TimeExecutionInterceptor.html",[38,0.736,113,2.343]],["body/injectables/TimeExecutionInterceptor.html",[8,0.024,12,0.242,13,0.159,14,0.213,20,0.694,22,0.667,34,0.242,35,0.432,36,0.016,37,0.016,38,0.981,39,1.334,41,0.332,42,0.859,43,2.401,44,1.971,45,2.588,46,1.343,51,1.186,53,1.103,54,1.103,55,0.432,56,0.861,62,0.916,64,0.809,67,1.424,68,1.723,71,1.52,76,2.576,113,3.122,130,2.419,163,1.901,167,1.901,171,2.619,183,1.186,483,4.493,484,2.851,485,4.493,486,3.927,487,4.841,488,4.493,489,4.841,490,3.359,491,2.851,492,4.493,493,4.627,494,3.359,495,3.927,496,4.627,497,2.516,498,3.359,499,4.627,500,2.851,501,3.359,502,3.359,503,3.359,504,3.359,505,3.359,506,3.359]],["title/injectables/TimeoutInterceptor.html",[38,0.736,111,2.343]],["body/injectables/TimeoutInterceptor.html",[8,0.024,12,0.277,13,0.182,14,0.244,20,0.761,22,0.763,34,0.277,35,0.494,36,0.017,37,0.017,38,1.074,39,1.527,41,0.38,46,1.471,51,0.986,53,1.263,54,1.263,55,0.494,56,0.986,62,1.049,68,1.432,71,1.863,111,3.42,163,2.176,173,2.654,485,4.302,486,4.302,487,5.116,488,4.812,489,5.116,491,3.263,492,4.812,495,4.302,497,2.881,500,3.263,507,3.263,508,3.845,509,5.068,510,3.845,511,5.669,512,3.845,513,5.068,514,3.845,515,3.845,516,3.263]],["title/interfaces/Total.html",[162,0.56,187,1.293]],["body/interfaces/Total.html",[8,0.024,12,0.243,13,0.251,14,0.215,34,0.465,36,0.016,37,0.016,41,0.334,42,0.863,55,0.597,59,1.331,61,1.259,64,1.378,157,1.731,158,1.259,162,1.044,182,1.731,183,1.192,187,2.308,189,2.662,190,1.343,192,2.109,197,1.259,199,1.259,205,1.534,207,1.971,208,1.645,209,1.645,210,1.645,211,2.783,212,1.971,213,1.645,214,1.645,215,1.645,216,2.425,217,1.645,218,1.434,219,1.645,220,1.645,221,1.534,222,1.645]],["title/coverage.html",[517,4.017]],["body/coverage.html",[7,1.051,8,0.024,13,0.11,14,0.147,15,1.736,16,1.736,27,1.736,35,0.55,36,0.012,37,0.012,38,1.291,40,1.967,55,0.298,68,0.863,76,2.084,77,1.564,79,1.967,83,1.312,98,1.603,101,2,105,1.564,111,1.564,113,1.564,120,1.967,125,1.736,128,1.312,131,1.736,132,1.214,139,1.967,153,1.426,155,1.214,157,0.863,158,0.863,161,1.564,162,1,187,0.863,200,1.967,201,1.967,205,2.643,207,0.983,212,0.983,216,0.983,218,0.983,223,1.736,225,1.967,268,2.424,269,1.736,275,1.214,277,1.736,279,1.736,281,1.967,290,1.312,310,1.426,311,1.736,315,1.967,321,1.214,333,1.128,367,1.426,371,1.564,372,2.711,373,1.967,378,1.564,381,1.312,383,1.736,394,1.967,417,2.647,418,1.967,419,1.967,428,1.312,429,1.967,442,1.736,443,1.967,444,1.564,445,1.967,462,1.967,468,1.736,477,1.967,483,1.967,484,1.967,507,1.967,517,1.967,518,2.318,519,2.318,520,2.318,521,7.015,522,5.157,523,5.826,524,2.999,525,5.826,526,1.967,527,6.089,528,2.999,529,1.736,530,5.651,531,1.967,532,4.282,533,4.79,534,1.967,535,2.999,536,1.967,537,2.647,538,2.318,539,2.318]],["title/dependencies.html",[3,2.031,540,2.463]],["body/dependencies.html",[3,2.112,8,0.024,22,0.862,26,3.252,35,0.704,36,0.019,37,0.019,109,3.685,127,3.252,236,3.685,237,3.685,294,2.929,427,3.685,497,3.252,541,4.341,542,4.341,543,6.007,544,5.481,545,4.341,546,4.341,547,4.341,548,4.341,549,4.341,550,4.341,551,4.341,552,4.341,553,4.341,554,4.341,555,4.341,556,4.341,557,4.341,558,4.341,559,4.341,560,4.341]],["title/miscellaneous/enumerations.html",[561,1.642,562,3.543]],["body/miscellaneous/enumerations.html",[8,0.022,36,0.021,37,0.021,41,0.516,64,1.256,561,2.952,562,4.427,563,6.13,564,5.216,565,5.216,566,5.216,567,3.908]],["title/miscellaneous/functions.html",[561,1.642,568,3.543]],["body/miscellaneous/functions.html",[8,0.022,36,0.02,37,0.02,41,0.476,53,1.583,54,1.583,55,0.619,56,1.235,59,1.16,62,1.315,66,3.251,183,1.499,468,4.38,534,4.089,536,5.342,537,3.609,561,2.727,568,4.089,569,4.817,570,4.089,571,4.817,572,4.817,573,4.817]],["title/index.html",[41,0.287,574,2.901,575,2.901]],["body/index.html",[8,0.017,13,0.139,20,0.44,23,4.172,33,3.567,36,0.014,37,0.014,57,1.534,141,3.039,151,1.803,183,1.078,186,2.379,189,1.163,190,1.163,290,3.593,356,2.487,366,2.487,368,3.567,375,1.977,415,4.172,439,3.624,529,4.26,535,3.567,567,2.195,576,2.487,577,2.93,578,2.93,579,2.93,580,5.37,581,4.203,582,3.567,583,4.915,584,2.93,585,2.93,586,4.915,587,2.93,588,2.93,589,2.93,590,2.93,591,4.203,592,4.203,593,4.203,594,2.93,595,2.93,596,2.93,597,2.93,598,2.93,599,2.93,600,2.93,601,2.93,602,2.93,603,2.93,604,2.93,605,2.93,606,2.93,607,2.93,608,4.203,609,2.93,610,2.93,611,4.203,612,4.203,613,2.93,614,2.93,615,2.93,616,2.93,617,2.93,618,4.203,619,2.93,620,2.93,621,4.203,622,4.915,623,4.203,624,2.93,625,2.93,626,2.93,627,4.915,628,4.203,629,2.93,630,4.203,631,2.93,632,2.93,633,2.93,634,2.93,635,2.93,636,2.93,637,2.93,638,2.93,639,2.93,640,2.93,641,4.915,642,2.93,643,2.93,644,2.93,645,2.93,646,2.93,647,2.93,648,2.93,649,2.93,650,2.93,651,2.93,652,2.93,653,2.93,654,2.93,655,2.93,656,2.93,657,2.93,658,2.93,659,2.93,660,2.93,661,2.93,662,2.93]],["title/modules.html",[2,2.007]],["body/modules.html",[1,2.638,2,1.977,8,0.019,36,0.019,37,0.019,86,3.146,90,2.441,91,2.869,92,2.638,93,2.638,124,2.869,663,6.643,664,6.643,665,6.643,666,6.851,667,5.73,668,5.73]],["title/overview.html",[669,4.017]],["body/overview.html",[1,3.399,2,1.299,3,2.111,4,2.6,5,2.6,6,2.6,7,2.801,8,0.024,9,2.456,10,1.734,11,1.734,36,0.015,37,0.015,39,1.216,78,1.604,83,2.851,86,4.552,87,2.6,88,2.6,89,2.6,90,3.028,91,4.089,92,3.632,93,3.724,124,3.1,199,1.141,224,2.067,306,2.6,308,2.6,309,2.6,310,3.8,321,3.233,381,3.495,388,2.6,389,2.6,391,2.6,428,2.851,454,2.6,455,2.6,456,2.6,457,2.6,669,2.6,670,3.063,671,4.338,672,3.063,673,3.063]],["title/properties.html",[42,0.775,540,2.463]],["body/properties.html",[8,0.023,36,0.021,37,0.021,42,0.968,576,4.427,674,5.216,675,5.216,676,5.216,677,5.216,678,5.216]],["title/miscellaneous/variables.html",[561,1.642,679,3.543]],["body/miscellaneous/variables.html",[8,0.024,27,3.25,32,2.067,36,0.015,37,0.015,41,0.303,55,0.772,59,0.608,64,1.487,67,2.618,71,1.425,98,1.39,116,2.928,119,2.295,125,2.295,128,1.734,131,3.25,132,1.604,134,2.295,136,2.6,138,2.067,155,2.272,173,2.272,175,1.604,185,2.6,268,2.456,269,3.25,274,2.6,275,2.638,277,4.105,279,3.25,280,2.6,282,2.6,288,2.6,290,2.456,298,2.6,317,2.6,324,2.6,325,2.6,327,4.105,375,2.067,439,2.928,516,2.6,524,2.6,526,4.276,528,2.6,529,3.25,531,2.6,537,2.295,561,1.734,567,2.295,570,2.6,582,2.6,679,2.6,680,3.063,681,4.338,682,4.338,683,3.063,684,3.063,685,5.479,686,3.063,687,3.063,688,3.063,689,3.063,690,3.063,691,3.063,692,3.063,693,3.063,694,3.063]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":675,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":185,"title":{},"body":{"injectables/DbService.html":{},"miscellaneous/variables.html":{}}}],["10",{"_index":672,"title":{},"body":{"overview.html":{}}}],["11",{"_index":673,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":671,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":362,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["4.17.21",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["4gb",{"_index":631,"title":{},"body":{"index.html":{}}}],["7",{"_index":670,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["8.3.4",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":192,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_index",{"_index":213,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_score",{"_index":214,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_shards",{"_index":222,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_source",{"_index":215,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["acknowledge",{"_index":591,"title":{},"body":{"index.html":{}}}],["admin",{"_index":288,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["analyse",{"_index":613,"title":{},"body":{"index.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["app.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":1,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules.html":{},"overview.html":{}}}],["appconfigservice",{"_index":7,"title":{"injectables/AppConfigService.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"overview.html":{}}}],["appcontroller",{"_index":77,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":86,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":83,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":647,"title":{},"body":{"index.html":{}}}],["argumentshost",{"_index":232,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":135,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["author",{"_index":678,"title":{},"body":{"properties.html":{}}}],["available",{"_index":668,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":632,"title":{},"body":{"index.html":{}}}],["await",{"_index":169,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["better",{"_index":602,"title":{},"body":{"index.html":{}}}],["body",{"_index":147,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"controllers/KafkaProducerController.html":{},"interfaces/LogSearchResult.html":{}}}],["body.ts",{"_index":418,"title":{},"body":{"interfaces/LogBody.html":{},"coverage.html":{}}}],["bool",{"_index":179,"title":{},"body":{"injectables/DbService.html":{}}}],["boolean",{"_index":221,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaConsumerService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["bootstrap",{"_index":536,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brokers",{"_index":300,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["brokerslist",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":666,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":663,"title":{},"body":{"modules.html":{}}}],["buildpostman",{"_index":636,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":489,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["can't",{"_index":353,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["careful",{"_index":626,"title":{},"body":{"index.html":{}}}],["catch",{"_index":172,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["catch((error",{"_index":365,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["catch(exception",{"_index":229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":238,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":510,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror(err",{"_index":515,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["choise",{"_index":617,"title":{},"body":{"index.html":{}}}],["choose",{"_index":583,"title":{},"body":{"index.html":{}}}],["ciimportant",{"_index":625,"title":{},"body":{"index.html":{}}}],["class",{"_index":35,"title":{"classes/HttpExceptionFilter.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":224,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{},"overview.html":{}}}],["client",{"_index":282,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["client.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{}}}],["client.module.ts",{"_index":269,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.module.ts:15",{"_index":272,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["client.service",{"_index":276,"title":{},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["client.service.ts",{"_index":281,"title":{},"body":{"injectables/KafkaClientService.html":{},"coverage.html":{}}}],["client.service.ts:12",{"_index":291,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:21",{"_index":289,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:25",{"_index":287,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:7",{"_index":292,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:8",{"_index":286,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client/constant",{"_index":278,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["client/constant.ts",{"_index":531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/kafka",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":298,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["cluster_appconfigmodule",{"_index":4,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_exports",{"_index":6,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_providers",{"_index":5,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule",{"_index":306,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule_exports",{"_index":308,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule_imports",{"_index":307,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["cluster_kafkaconsumermodule_providers",{"_index":309,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule",{"_index":388,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule_exports",{"_index":389,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule_imports",{"_index":390,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["cluster_kafkaproducermodule_providers",{"_index":391,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_logsmodule",{"_index":454,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_exports",{"_index":457,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_imports",{"_index":455,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_providers",{"_index":456,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["code",{"_index":254,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["compose",{"_index":635,"title":{},"body":{"index.html":{}}}],["config",{"_index":57,"title":{},"body":{"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"index.html":{}}}],["config.get('elasticsearch')?.node",{"_index":137,"title":{},"body":{"modules/DbModule.html":{}}}],["config.module.ts",{"_index":17,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["config.service",{"_index":24,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["config.service.ts",{"_index":40,"title":{},"body":{"injectables/AppConfigService.html":{},"coverage.html":{}}}],["config.service.ts:10",{"_index":60,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:14",{"_index":65,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:6",{"_index":52,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config/app",{"_index":16,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["configmodule",{"_index":25,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configmodule.forroot",{"_index":30,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":50,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["connect",{"_index":346,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["connected",{"_index":352,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["connecttoconsumer",{"_index":318,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["connecttoconsumer(topic",{"_index":323,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["const",{"_index":130,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["constructor",{"_index":48,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["constructor(@inject('dbserviceinterface",{"_index":436,"title":{},"body":{"injectables/LogProvider.html":{}}}],["constructor(config",{"_index":49,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/KafkaClientService.html":{}}}],["constructor(dbservice",{"_index":431,"title":{},"body":{"injectables/LogProvider.html":{}}}],["constructor(elasticsearchservice",{"_index":142,"title":{},"body":{"injectables/DbService.html":{}}}],["constructor(kafkaclientservice",{"_index":320,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["constructor(logprovider",{"_index":463,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(private",{"_index":70,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{}}}],["consumemessage",{"_index":316,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer",{"_index":317,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["consumer.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.module.ts",{"_index":312,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["consumer.service",{"_index":313,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["consumer.service.ts",{"_index":315,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["consumer.service.ts:11",{"_index":332,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:12",{"_index":322,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:20",{"_index":328,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:33",{"_index":326,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:60",{"_index":329,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer/kafka",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["container",{"_index":634,"title":{},"body":{"index.html":{}}}],["context",{"_index":491,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["context.gethandler()?.name",{"_index":498,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["contrasts",{"_index":605,"title":{},"body":{"index.html":{}}}],["controller",{"_index":76,"title":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{},"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["controller('logs",{"_index":451,"title":{},"body":{"controllers/LogsController.html":{}}}],["controller('producer",{"_index":385,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["controllers",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["core/app",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["core/config",{"_index":28,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["core/interceptors/time",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["core/interceptors/timeout.interceptor",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["core/kafka",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{}}}],["correct",{"_index":651,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":517,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":660,"title":{},"body":{"index.html":{}}}],["crashing",{"_index":633,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":239,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":242,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":241,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":186,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["database",{"_index":581,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":499,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["dbmodule",{"_index":124,"title":{"modules/DbModule.html":{}},"body":{"modules/DbModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["dbprovider",{"_index":131,"title":{},"body":{"modules/DbModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbservice",{"_index":128,"title":{"injectables/DbService.html":{}},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"injectables/LogProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbserviceinterface",{"_index":132,"title":{"interfaces/DbServiceInterface.html":{}},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"classes/LogDto.html":{},"controllers/LogsController.html":{},"classes/SendLogRequestDto.html":{}}}],["default",{"_index":67,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":654,"title":{},"body":{"index.html":{}}}],["description",{"_index":576,"title":{},"body":{"index.html":{},"properties.html":{}}}],["design",{"_index":648,"title":{},"body":{"index.html":{}}}],["desktop",{"_index":629,"title":{},"body":{"index.html":{}}}],["detailmessage",{"_index":257,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["dev",{"_index":567,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development_local",{"_index":566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":622,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["dynamicmodule",{"_index":273,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["e",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eachmessage",{"_index":355,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["easily",{"_index":646,"title":{},"body":{"index.html":{}}}],["elastic",{"_index":582,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["elastic/elasticsearch",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch",{"_index":529,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["elasticsearchmodule",{"_index":126,"title":{},"body":{"modules/DbModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":133,"title":{},"body":{"modules/DbModule.html":{}}}],["elasticsearchservice",{"_index":143,"title":{},"body":{"injectables/DbService.html":{}}}],["end",{"_index":171,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["entity",{"_index":157,"title":{"interfaces/Entity.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["enumerations",{"_index":562,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envconfig",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment_types",{"_index":563,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":173,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["err.message",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err_uuid",{"_index":261,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error",{"_index":175,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"miscellaneous/variables.html":{}}}],["errormessage",{"_index":259,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception",{"_index":234,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":245,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":244,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":226,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execution",{"_index":502,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["execution.interceptor",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["execution.interceptor.ts",{"_index":484,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["execution.interceptor.ts:6",{"_index":494,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["execution.interceptor.ts:8",{"_index":490,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["executioncontext",{"_index":487,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["export",{"_index":34,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{}}}],["exports",{"_index":19,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["express",{"_index":236,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":478,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["factoryprovider",{"_index":274,"title":{},"body":{"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":210,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["features/kafka",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{}}}],["features/logs/log.provider",{"_index":461,"title":{},"body":{"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["features/logs/logs.controller",{"_index":459,"title":{},"body":{"modules/LogsModule.html":{}}}],["features/logs/logs.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["features/logs/logs.service",{"_index":335,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{}}}],["fields",{"_index":181,"title":{},"body":{"injectables/DbService.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["finalconfig",{"_index":27,"title":{},"body":{"modules/AppConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["frombeginning",{"_index":325,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":535,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["functionalities",{"_index":579,"title":{},"body":{"index.html":{}}}],["functionname",{"_index":182,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["functions",{"_index":568,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtionname",{"_index":194,"title":{},"body":{"injectables/DbService.html":{}}}],["get(':input",{"_index":447,"title":{},"body":{"controllers/LogsController.html":{}}}],["get(key",{"_index":58,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getadmin",{"_index":283,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["getclient",{"_index":284,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["geterrormessage",{"_index":155,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["geterrormessage(err",{"_index":176,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["geterrormessage(error",{"_index":369,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["gethello",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":574,"title":{"index.html":{}},"body":{}}],["global",{"_index":21,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["globalconfig",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goes",{"_index":606,"title":{},"body":{"index.html":{}}}],["good",{"_index":616,"title":{},"body":{"index.html":{}}}],["graph",{"_index":667,"title":{},"body":{"modules.html":{}}}],["groupid",{"_index":324,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["h._id",{"_index":193,"title":{},"body":{"injectables/DbService.html":{}}}],["h:mm:ss:ms",{"_index":266,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["h?._source?.functionname",{"_index":195,"title":{},"body":{"injectables/DbService.html":{}}}],["h?._source?.message",{"_index":196,"title":{},"body":{"injectables/DbService.html":{}}}],["h?._source?.payload",{"_index":198,"title":{},"body":{"injectables/DbService.html":{}}}],["handlergeneralexception",{"_index":468,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlergeneralexception(e",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlergeneralexception(err",{"_index":476,"title":{},"body":{"injectables/LogsService.html":{}}}],["hello",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["hit",{"_index":212,"title":{"interfaces/Hit.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["hits",{"_index":216,"title":{"interfaces/Hits.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["horizontalpodautoscaler",{"_index":657,"title":{},"body":{"index.html":{}}}],["host",{"_index":231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":240,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":584,"title":{},"body":{"index.html":{}}}],["http://esone:9200",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":223,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["id",{"_index":471,"title":{},"body":{"injectables/LogsService.html":{}}}],["identifier",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["if(controller",{"_index":504,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["implement",{"_index":595,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":643,"title":{},"body":{"index.html":{}}}],["implements",{"_index":163,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"index.html":{}}}],["imports",{"_index":29,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["increase",{"_index":627,"title":{},"body":{"index.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexlog",{"_index":166,"title":{},"body":{"injectables/DbService.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{}}}],["inherited",{"_index":479,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["inject",{"_index":138,"title":{},"body":{"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"injectables/LogProvider.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":39,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"overview.html":{}}}],["injection",{"_index":585,"title":{},"body":{"index.html":{}}}],["input",{"_index":449,"title":{},"body":{"controllers/LogsController.html":{}}}],["insert",{"_index":140,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{}}}],["insert(body",{"_index":145,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{}}}],["installation",{"_index":618,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":516,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["instances",{"_index":659,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":485,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["intercept(context",{"_index":486,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["interface",{"_index":162,"title":{"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["interface.ts",{"_index":201,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"coverage.html":{}}}],["interface.ts:4",{"_index":202,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["interface.ts:6",{"_index":203,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["interfaces",{"_index":199,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"overview.html":{}}}],["isglobal",{"_index":31,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["isobject",{"_index":425,"title":{},"body":{"classes/LogDto.html":{}}}],["isobject()@isoptional",{"_index":423,"title":{},"body":{"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["isoptional",{"_index":426,"title":{},"body":{"classes/LogDto.html":{}}}],["isstring",{"_index":420,"title":{},"body":{"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["it's",{"_index":614,"title":{},"body":{"index.html":{}}}],["json.parse(message?.value.tostring",{"_index":358,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["json.stringify",{"_index":361,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["json.stringify(data",{"_index":413,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["json.stringify(err",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka",{"_index":290,"title":{},"body":{"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["kafka:9092",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka_client_registration",{"_index":277,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientmodule",{"_index":90,"title":{"modules/KafkaClientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaclientmodule.registerasync",{"_index":314,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{}}}],["kafkaclientregistration",{"_index":279,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientservice",{"_index":275,"title":{"injectables/KafkaClientService.html":{}},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientservice.register",{"_index":280,"title":{},"body":{"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["kafkaconfigclient",{"_index":295,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.brokerslist",{"_index":301,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.brokerslist?.join",{"_index":304,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.clientid",{"_index":299,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigconsumer",{"_index":336,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.frombeginning",{"_index":341,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.groupid",{"_index":339,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.topic",{"_index":338,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconsumermodule",{"_index":91,"title":{"modules/KafkaConsumerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaconsumerservice",{"_index":310,"title":{"injectables/KafkaConsumerService.html":{}},"body":{"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{},"overview.html":{}}}],["kafkajs",{"_index":294,"title":{},"body":{"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"dependencies.html":{}}}],["kafkaproducercontroller",{"_index":371,"title":{"controllers/KafkaProducerController.html":{}},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"coverage.html":{}}}],["kafkaproducermodule",{"_index":92,"title":{"modules/KafkaProducerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaproducerservice",{"_index":381,"title":{"injectables/KafkaProducerService.html":{}},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":61,"title":{},"body":{"injectables/AppConfigService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["kubernetes",{"_index":655,"title":{},"body":{"index.html":{}}}],["license",{"_index":676,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":206,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["livenesscheck",{"_index":505,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["load",{"_index":33,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["lodash",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":367,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["log_pipeline",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logbody",{"_index":153,"title":{"interfaces/LogBody.html":{}},"body":{"injectables/DbService.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["logdto",{"_index":333,"title":{"classes/LogDto.html":{}},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["logdto:12",{"_index":482,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logdto:5",{"_index":480,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logdto:8",{"_index":481,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logger",{"_index":45,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["logger(appconfigservice.name",{"_index":69,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["logger(dbservice.name",{"_index":152,"title":{},"body":{"injectables/DbService.html":{}}}],["logger(httpexceptionfilter.name",{"_index":227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(kafkaclientservice.name",{"_index":293,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["logger(kafkaconsumerservice.name",{"_index":331,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["logger(kafkaproducerservice.name",{"_index":400,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["logger(logprovider.name",{"_index":435,"title":{},"body":{"injectables/LogProvider.html":{}}}],["logger(logsservice.name",{"_index":467,"title":{},"body":{"injectables/LogsService.html":{}}}],["logger(timeexecutioninterceptor.name",{"_index":493,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["logprovider",{"_index":428,"title":{"injectables/LogProvider.html":{}},"body":{"injectables/LogProvider.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["logs",{"_index":439,"title":{},"body":{"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logs.postman_collection.json",{"_index":637,"title":{},"body":{"index.html":{}}}],["logscontroller",{"_index":444,"title":{"controllers/LogsController.html":{}},"body":{"controllers/LogsController.html":{},"modules/LogsModule.html":{},"coverage.html":{}}}],["logsearchresult",{"_index":442,"title":{"interfaces/LogSearchResult.html":{}},"body":{"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["logsmodule",{"_index":93,"title":{"modules/LogsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["logsservice",{"_index":321,"title":{"injectables/LogsService.html":{}},"body":{"injectables/KafkaConsumerService.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["lose",{"_index":588,"title":{},"body":{"index.html":{}}}],["managed",{"_index":662,"title":{},"body":{"index.html":{}}}],["matching",{"_index":37,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max_score",{"_index":217,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["memory",{"_index":628,"title":{},"body":{"index.html":{}}}],["message",{"_index":183,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["message.message",{"_index":250,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.code",{"_index":255,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.detailmessage",{"_index":258,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.err_uuid",{"_index":262,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.error",{"_index":251,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.errormessage",{"_index":260,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.message",{"_index":267,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.zoomerror",{"_index":252,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["messages",{"_index":415,"title":{},"body":{"injectables/KafkaProducerService.html":{},"index.html":{}}}],["metadata",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["minimum_should_match",{"_index":184,"title":{},"body":{"injectables/DbService.html":{}}}],["miscellaneous",{"_index":561,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":237,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["moment().format('mmmm",{"_index":264,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["mongo",{"_index":615,"title":{},"body":{"index.html":{}}}],["multi_match",{"_index":180,"title":{},"body":{"injectables/DbService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":619,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":495,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["nestjs",{"_index":653,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":26,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":127,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":68,"title":{},"body":{"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["next",{"_index":488,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe",{"_index":500,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["node",{"_index":136,"title":{},"body":{"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":642,"title":{},"body":{"index.html":{}}}],["npm",{"_index":624,"title":{},"body":{"index.html":{}}}],["null",{"_index":330,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["number",{"_index":189,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"index.html":{}}}],["object",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":492,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["offline",{"_index":587,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":319,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["open",{"_index":594,"title":{},"body":{"index.html":{}}}],["optional",{"_index":56,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["overview",{"_index":669,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":540,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parallelization",{"_index":600,"title":{},"body":{"index.html":{}}}],["param",{"_index":450,"title":{},"body":{"controllers/LogsController.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["partition",{"_index":356,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["partitions",{"_index":599,"title":{},"body":{"index.html":{}}}],["password",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":248,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":197,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["perfect",{"_index":608,"title":{},"body":{"index.html":{}}}],["pipeline",{"_index":577,"title":{},"body":{"index.html":{}}}],["pod",{"_index":658,"title":{},"body":{"index.html":{}}}],["post",{"_index":379,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["postman",{"_index":640,"title":{},"body":{"index.html":{}}}],["powerfull",{"_index":612,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":374,"title":{},"body":{"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{}}}],["private",{"_index":43,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["process",{"_index":604,"title":{},"body":{"index.html":{}}}],["process.env[key",{"_index":75,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["produce",{"_index":645,"title":{},"body":{"index.html":{}}}],["producer",{"_index":375,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["producer.controller",{"_index":393,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["producer.controller.ts",{"_index":373,"title":{},"body":{"controllers/KafkaProducerController.html":{},"coverage.html":{}}}],["producer.controller.ts:10",{"_index":380,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["producer.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["producer.module.ts",{"_index":392,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["producer.service",{"_index":382,"title":{},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{}}}],["producer.service.ts",{"_index":394,"title":{},"body":{"injectables/KafkaProducerService.html":{},"coverage.html":{}}}],["producer.service.ts:11",{"_index":401,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:12",{"_index":395,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:16",{"_index":397,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:24",{"_index":396,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:35",{"_index":399,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer/dtos/log.dto",{"_index":334,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{}}}],["producer/dtos/log.dto.ts",{"_index":419,"title":{},"body":{"classes/LogDto.html":{},"coverage.html":{}}}],["producer/dtos/log.dto.ts:12",{"_index":424,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/log.dto.ts:5",{"_index":421,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/log.dto.ts:8",{"_index":422,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/send",{"_index":383,"title":{},"body":{"controllers/KafkaProducerController.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["producer/kafka",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{}}}],["project",{"_index":639,"title":{},"body":{"index.html":{}}}],["promise",{"_index":148,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{}}}],["properties",{"_index":42,"title":{"properties.html":{}},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"properties.html":{}}}],["provide",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":18,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["pub/sub",{"_index":593,"title":{},"body":{"index.html":{}}}],["query",{"_index":178,"title":{},"body":{"injectables/DbService.html":{}}}],["queue",{"_index":580,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["received",{"_index":360,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["recordmetadata",{"_index":402,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["reflect",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":285,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["registerasync",{"_index":271,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["registered",{"_index":303,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["registry",{"_index":597,"title":{},"body":{"index.html":{}}}],["relation",{"_index":211,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["request",{"_index":235,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.dto",{"_index":384,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["request.dto.ts",{"_index":477,"title":{},"body":{"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["request.url",{"_index":249,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["requesttimeoutexception",{"_index":509,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["response",{"_index":168,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["response.status(status).json",{"_index":253,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response?._id",{"_index":472,"title":{},"body":{"injectables/LogsService.html":{}}}],["response?.hits?.hits?.map((h",{"_index":191,"title":{},"body":{"injectables/DbService.html":{}}}],["response?.hits?.total",{"_index":188,"title":{},"body":{"injectables/DbService.html":{}}}],["result",{"_index":190,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"index.html":{}}}],["result.ts",{"_index":443,"title":{},"body":{"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["results",{"_index":36,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retention",{"_index":603,"title":{},"body":{"index.html":{}}}],["return",{"_index":71,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":62,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":656,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":638,"title":{},"body":{"index.html":{}}}],["rootobjectsearchresult",{"_index":218,"title":{"interfaces/RootObjectSearchResult.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["run",{"_index":623,"title":{},"body":{"index.html":{}}}],["running",{"_index":621,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":497,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["save",{"_index":366,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["saved",{"_index":473,"title":{},"body":{"injectables/LogsService.html":{}}}],["savelog",{"_index":430,"title":{},"body":{"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["savelog(data",{"_index":364,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["scalability",{"_index":649,"title":{},"body":{"index.html":{}}}],["scale",{"_index":652,"title":{},"body":{"index.html":{}}}],["schema",{"_index":596,"title":{},"body":{"index.html":{}}}],["search",{"_index":141,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["search(@param('input",{"_index":452,"title":{},"body":{"controllers/LogsController.html":{}}}],["search(input",{"_index":446,"title":{},"body":{"controllers/LogsController.html":{}}}],["search(text",{"_index":149,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["searchreturn",{"_index":158,"title":{"interfaces/SearchReturn.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["send",{"_index":376,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{}}}],["send(@body",{"_index":386,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["send(body",{"_index":377,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["send(data",{"_index":398,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["sendlogrequestdto",{"_index":378,"title":{"classes/SendLogRequestDto.html":{}},"body":{"controllers/KafkaProducerController.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["server",{"_index":586,"title":{},"body":{"index.html":{}}}],["service",{"_index":161,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"coverage.html":{}}}],["services/db/db.module",{"_index":460,"title":{},"body":{"modules/LogsModule.html":{}}}],["services/db/db.service",{"_index":129,"title":{},"body":{"modules/DbModule.html":{}}}],["services/db/interfaces",{"_index":159,"title":{},"body":{"injectables/DbService.html":{}}}],["services/db/interfaces/db",{"_index":160,"title":{},"body":{"injectables/DbService.html":{},"injectables/LogProvider.html":{}}}],["services/db/interfaces/index",{"_index":204,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["services/db/interfaces/log",{"_index":154,"title":{},"body":{"injectables/DbService.html":{},"interfaces/LogSearchResult.html":{}}}],["services/kafka",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["setconfig",{"_index":47,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["setconfig(key",{"_index":63,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["setting:${key",{"_index":74,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["shards",{"_index":207,"title":{"interfaces/Shards.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["skipped",{"_index":209,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["source",{"_index":13,"title":{"interfaces/Source.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"index.html":{}}}],["sql",{"_index":607,"title":{},"body":{"index.html":{}}}],["src/.../config.constant.ts",{"_index":564,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.ts",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db.module.ts",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dev.config.ts",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../kafka",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.ts",{"_index":570,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/app",{"_index":15,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["src/core/config/config.constant.ts",{"_index":565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/config/config.ts",{"_index":524,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/dev.config.ts",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/http.exception.filter.ts",{"_index":225,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.exception.filter.ts:7",{"_index":228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/filters/http.exception.filter.ts:9",{"_index":233,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/interceptors/time",{"_index":483,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":507,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:7",{"_index":508,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/kafka",{"_index":268,"title":{},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/features/kafka",{"_index":372,"title":{},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["src/features/logs/log.provider.ts",{"_index":429,"title":{},"body":{"injectables/LogProvider.html":{},"coverage.html":{}}}],["src/features/logs/log.provider.ts:12",{"_index":433,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/log.provider.ts:24",{"_index":434,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/log.provider.ts:8",{"_index":432,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/logs.controller.ts",{"_index":445,"title":{},"body":{"controllers/LogsController.html":{},"coverage.html":{}}}],["src/features/logs/logs.controller.ts:8",{"_index":448,"title":{},"body":{"controllers/LogsController.html":{}}}],["src/features/logs/logs.module.ts",{"_index":458,"title":{},"body":{"modules/LogsModule.html":{}}}],["src/features/logs/logs.service.ts",{"_index":462,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/features/logs/logs.service.ts:12",{"_index":465,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/features/logs/logs.service.ts:24",{"_index":466,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/features/logs/logs.service.ts:8",{"_index":464,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/services/db/db.module.ts",{"_index":125,"title":{},"body":{"modules/DbModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/db/db.service.ts",{"_index":139,"title":{},"body":{"injectables/DbService.html":{},"coverage.html":{}}}],["src/services/db/db.service.ts:10",{"_index":144,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/db.service.ts:14",{"_index":146,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/db.service.ts:29",{"_index":150,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/interfaces/db",{"_index":200,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"coverage.html":{}}}],["src/services/db/interfaces/index.ts",{"_index":205,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["src/services/db/interfaces/log",{"_index":417,"title":{},"body":{"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["src/services/kafka",{"_index":311,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["src/shared/utils",{"_index":156,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["src/shared/utils.ts",{"_index":537,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":167,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["started",{"_index":575,"title":{"index.html":{}},"body":{}}],["start}ms",{"_index":503,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["statements",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":270,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["status",{"_index":243,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":247,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["still",{"_index":589,"title":{},"body":{"index.html":{}}}],["storing",{"_index":609,"title":{},"body":{"index.html":{}}}],["string",{"_index":59,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaConsumerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["successful",{"_index":208,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["support",{"_index":664,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":665,"title":{},"body":{"modules.html":{}}}],["table",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":496,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["test",{"_index":641,"title":{},"body":{"index.html":{}}}],["text",{"_index":151,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["this.appservice.gethello",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["this.client",{"_index":297,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.client.admin",{"_index":305,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.config.get('kafka')?.client",{"_index":296,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.config.get('kafka')?.consumer",{"_index":337,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.config.get('kafka')?.producer?.topic",{"_index":412,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.config.get(key",{"_index":72,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.connect",{"_index":406,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.connecttoconsumer(topic",{"_index":340,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumemessage",{"_index":342,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer",{"_index":348,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.connect",{"_index":350,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.run",{"_index":354,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.subscribe",{"_index":351,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.dbservice.insert(data",{"_index":438,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.dbservice.search(text",{"_index":441,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.elasticsearchservice.index",{"_index":170,"title":{},"body":{"injectables/DbService.html":{}}}],["this.elasticsearchservice.search",{"_index":177,"title":{},"body":{"injectables/DbService.html":{}}}],["this.kafkaclientservice.getclient().consumer",{"_index":349,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.kafkaclientservice.getclient().producer",{"_index":410,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.kafkaproducerservice.send(body",{"_index":387,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["this.logger.error",{"_index":246,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["this.logger.error(`dbservice",{"_index":174,"title":{},"body":{"injectables/DbService.html":{}}}],["this.logger.error(`kafkaconsumerservice",{"_index":343,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logger.error(`kafkaproducerservice",{"_index":407,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.logger.error(`logprovider",{"_index":440,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.logger.error(`logsservice",{"_index":474,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logger.log",{"_index":344,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["this.logger.log('appconfigservice",{"_index":73,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.logger.log(`dbservice",{"_index":165,"title":{},"body":{"injectables/DbService.html":{}}}],["this.logger.log(`kafkaclientservice",{"_index":302,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.logger.log(`kafkaconsumerservice",{"_index":357,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logger.log(`kafkaproducerservice",{"_index":408,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.logger.log(`logprovider",{"_index":437,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.logger.log(`logsservice",{"_index":469,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logger.log(`timeexecutioninterceptor",{"_index":506,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["this.logger.warn",{"_index":370,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logprovider.savelog(data",{"_index":470,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logprovider.search(text",{"_index":475,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":363,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logsservice.search(input",{"_index":453,"title":{},"body":{"controllers/LogsController.html":{}}}],["this.producer",{"_index":409,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.producer.connect",{"_index":411,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.producer.send",{"_index":414,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["throw",{"_index":416,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["throwerror",{"_index":511,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":501,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["timed_out",{"_index":220,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["timeexecutioninterceptor",{"_index":113,"title":{"injectables/TimeExecutionInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["timeout",{"_index":512,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(60000",{"_index":514,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":513,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":111,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":263,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["took",{"_index":219,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["topic",{"_index":327,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"miscellaneous/variables.html":{}}}],["topics",{"_index":347,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["total",{"_index":187,"title":{"interfaces/Total.html":{}},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["transformer",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":32,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":164,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["trying",{"_index":345,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["two",{"_index":578,"title":{},"body":{"index.html":{}}}],["type",{"_index":55,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/uuid",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["unknown",{"_index":359,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["unlicensed",{"_index":677,"title":{},"body":{"properties.html":{}}}],["unstructured",{"_index":610,"title":{},"body":{"index.html":{}}}],["until",{"_index":590,"title":{},"body":{"index.html":{}}}],["up",{"_index":630,"title":{},"body":{"index.html":{}}}],["use",{"_index":592,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":134,"title":{},"body":{"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usevalue",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["utilisation",{"_index":661,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":405,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["uuidv4",{"_index":404,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["v4",{"_index":403,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["validationpipe",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":427,"title":{},"body":{"classes/LogDto.html":{},"dependencies.html":{}}}],["value",{"_index":64,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":679,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":674,"title":{},"body":{"properties.html":{}}}],["very",{"_index":611,"title":{},"body":{"index.html":{}}}],["via",{"_index":368,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["void",{"_index":66,"title":{},"body":{"injectables/AppConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":650,"title":{},"body":{"index.html":{}}}],["way",{"_index":644,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["work",{"_index":598,"title":{},"body":{"index.html":{}}}],["works",{"_index":601,"title":{},"body":{"index.html":{}}}],["world",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you're",{"_index":620,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":265,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["zoomerror",{"_index":256,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_providers\n\n\n\ncluster_AppConfigModule_exports\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/app-config/app-config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { AppConfigService } from './app-config.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { finalConfig } from '@core/config';\n\n@Global()\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [finalConfig],\n        }),\n    ],\n    providers: [AppConfigService],\n    exports: [AppConfigService],\n})\nexport class AppConfigModule {}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppConfigService.html":{"url":"injectables/AppConfigService.html","title":"injectable - AppConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/app-config/app-config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                setConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/app-config/app-config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/app-config/app-config.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setConfig\n                        \n                    \n                \n            \n            \n                \nsetConfig(key: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/app-config/app-config.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AppConfigService.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/app-config/app-config.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class AppConfigService {\n    private readonly logger = new Logger(AppConfigService.name);\n\n    constructor(private config: ConfigService) {}\n\n    get(key: string) {\n        return this.config.get(key);\n    }\n\n    setConfig(key: string, value: any) {\n        this.logger.log('AppConfigService | setConfig', `setConfig | setting:${key}`);\n        process.env[key] = value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\nAppModule -->\n\nKafkaClientModule->AppModule\n\n\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nAppModule -->\n\nKafkaConsumerModule->AppModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nAppModule -->\n\nKafkaProducerModule->AppModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            KafkaClientModule\n                        \n                        \n                            KafkaConsumerModule\n                        \n                        \n                            KafkaProducerModule\n                        \n                        \n                            LogsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { KafkaClientModule } from '@core/kafka-client/kafka-client.module';\nimport { KafkaProducerModule } from '@features/kafka-producer/kafka-producer.module';\nimport { AppConfigModule } from '@core/app-config';\nimport { KafkaConsumerModule } from '@services/kafka-consumer/kafka-consumer.module';\nimport {APP_INTERCEPTOR, APP_PIPE} from '@nestjs/core';\nimport { LogsModule } from '@features/logs/logs.module';\nimport {TimeoutInterceptor} from \"@core/interceptors/timeout.interceptor\";\nimport {TimeExecutionInterceptor} from \"@core/interceptors/time-execution.interceptor\";\n\n@Module({\n    imports: [KafkaClientModule, KafkaProducerModule, AppConfigModule, KafkaConsumerModule, LogsModule],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        {\n            provide: APP_PIPE,\n            useValue: new ValidationPipe({ whitelist: true }),\n        },\n        { provide: APP_INTERCEPTOR, useClass: TimeExecutionInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { AppConfigModule, AppConfigService } from '@core/app-config';\nimport { DbService } from '@services/db/db.service';\n\nconst dbProvider = {\n    provide: 'DbServiceInterface',\n    useClass: DbService,\n};\n\n@Module({\n    imports: [\n        ElasticsearchModule.registerAsync({\n            imports: [AppConfigModule],\n            useFactory: async (config: AppConfigService) => ({\n                    node: config.get('ELASTICSEARCH')?.node,\n                },\n            inject: [AppConfigService],\n        }),\n    ],\n    providers: [dbProvider],\n    exports: [ElasticsearchModule, dbProvider],\n})\nexport class DbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DbService.html":{"url":"injectables/DbService.html","title":"injectable - DbService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DbService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/db.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticSearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/services/db/db.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticSearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(body: any, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/db.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/db.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DbService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/db/db.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport { LogBody } from '@services/db/interfaces/log-body';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { Entity, SearchReturn } from '@services/db/interfaces';\nimport { DbServiceInterface } from '@services/db/interfaces/db-service-interface';\n\n@Injectable()\nexport class DbService implements DbServiceInterface {\n    private readonly logger = new Logger(DbService.name);\n\n    constructor(private readonly elasticSearchService: ElasticsearchService) {}\n\n    async insert(body: any, index: string): Promise {\n        try {\n            this.logger.log(`DbService | indexLog | start`);\n\n            const response = await this.elasticSearchService.index({\n                index: index,\n                body,\n            });\n            this.logger.log(`DbService | indexLog | end`);\n            return response;\n        } catch (err) {\n            this.logger.error(`DbService | indexLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string, index: string): Promise {\n        try {\n            this.logger.log(`DbService | search | start`);\n\n            const response = await this.elasticSearchService.search({\n                index: index,\n                body: {\n                    query: {\n                        bool: {\n                            should: [\n                                {\n                                    multi_match: {\n                                        query: text,\n                                        fields: ['functionName', 'message'],\n                                    },\n                                },\n                            ],\n                            minimum_should_match: 1,\n                        },\n                    },\n                },\n            });\n            const data: SearchReturn = {\n                total: response?.hits?.total as number,\n                result: response?.hits?.hits?.map((h) => {\n                    return {\n                        _id: h._id,\n                        funtionName: h?._source?.functionName,\n                        message: h?._source?.message,\n                        payload: h?._source?.payload,\n                    };\n                }),\n            };\n\n            this.logger.log(`DbService | search | end`);\n            return data;\n        } catch (err) {\n            this.logger.error(`DbService | search | error - ${getErrorMessage(err)}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbServiceInterface.html":{"url":"interfaces/DbServiceInterface.html","title":"interface - DbServiceInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbServiceInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/db-service-interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        search\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(body: any, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/interfaces/db-service-interface.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(text: string, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/interfaces/db-service-interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Entity, SearchReturn } from '@services/db/interfaces/index';\n\nexport interface DbServiceInterface {\n    insert(body: any, index: string): Promise;\n\n    search(text: string, index: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Entity.html":{"url":"interfaces/Entity.html","title":"interface - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            functionName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hit.html":{"url":"interfaces/Hit.html","title":"interface - Hit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Hit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            _index\n                                        \n                                \n                                \n                                        \n                                            _score\n                                        \n                                \n                                \n                                        \n                                            _source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _source:         Source\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Source\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hits.html":{"url":"interfaces/Hits.html","title":"interface - Hits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Hits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            max_score\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:         Hit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max_score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         Total\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Total\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/http.exception.filter.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.exception.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, Logger } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport moment from 'moment';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    private readonly logger = new Logger(HttpExceptionFilter.name);\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n        const message = exception.getResponse() as any;\n\n        this.logger.error(\n            `HttpExceptionFilter | catch | [statusCode]: ${status} - [path]: ${request.url} - [message]: ${message.message} - [error]: ${message?.error}`,\n        );\n        if (message?.zoomError) {\n            response.status(status).json({\n                code: message?.code,\n                status: status,\n                message: {\n                    code: message?.code,\n                    statusCode: status,\n                    zoomError: true,\n                    detailMessage: message?.detailMessage,\n                    errorMessage: message?.errorMessage,\n                    err_uuid: message?.err_uuid,\n                },\n            });\n        } else {\n            response.status(status).json({\n                statusCode: status,\n                timestamp: moment().format('MMMM Do YYYY, h:mm:ss:ms a'),\n                path: request.url,\n                message: message?.message,\n                error: message?.error,\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaClientModule.html":{"url":"modules/KafkaClientModule.html","title":"module - KafkaClientModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/kafka-client/kafka-client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, FactoryProvider, Module } from '@nestjs/common';\nimport { KafkaClientService } from '@core/kafka-client/kafka-client.service';\nimport { KAFKA_CLIENT_REGISTRATION } from '@core/kafka-client/constant';\n\nexport const KafkaClientRegistration: FactoryProvider = {\n    provide: KAFKA_CLIENT_REGISTRATION,\n    useFactory: (kafkaClientService: KafkaClientService) => {\n        return kafkaClientService.register();\n    },\n    inject: [KafkaClientService],\n};\n\n@Module({})\nexport class KafkaClientModule {\n    static registerAsync(): DynamicModule {\n        return {\n            module: KafkaClientModule,\n            providers: [KafkaClientService, KafkaClientRegistration],\n            exports: [KafkaClientService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaClientService.html":{"url":"injectables/KafkaClientService.html","title":"injectable - KafkaClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/kafka-client/kafka-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAdmin\n                            \n                            \n                                getClient\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AppConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/kafka-client/kafka-client.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAdmin\n                        \n                    \n                \n            \n            \n                \ngetAdmin()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Admin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Kafka\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Kafka\n\n                    \n                \n                    \n                        \n                                Defined in src/core/kafka-client/kafka-client.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaClientService.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/kafka-client/kafka-client.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Admin, Kafka } from 'kafkajs';\nimport { AppConfigService } from '@core/app-config';\n\n@Injectable()\nexport class KafkaClientService {\n    private client: Kafka;\n    private readonly logger = new Logger(KafkaClientService.name);\n\n    constructor(private readonly config: AppConfigService) {}\n\n    register(): void {\n        const kafkaConfigClient = this.config.get('KAFKA')?.client;\n        this.client = new Kafka({\n            clientId: kafkaConfigClient?.clientId,\n            brokers: kafkaConfigClient?.brokersList,\n        });\n        this.logger.log(`KafkaClientService is registered, for brokers: ${kafkaConfigClient?.brokersList?.join(', ')}`);\n    }\n\n    getClient(): Kafka {\n        return this.client;\n    }\n\n    getAdmin(): Admin {\n        return this.client.admin();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaConsumerModule.html":{"url":"modules/KafkaConsumerModule.html","title":"module - KafkaConsumerModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaConsumerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KafkaConsumerModule\n\n\n\ncluster_KafkaConsumerModule_imports\n\n\n\ncluster_KafkaConsumerModule_exports\n\n\n\ncluster_KafkaConsumerModule_providers\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nKafkaConsumerModule -->\n\nKafkaClientModule->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaConsumerModule -->\n\nKafkaProducerModule->KafkaConsumerModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nKafkaConsumerModule -->\n\nLogsModule->KafkaConsumerModule\n\n\n\n\n\nKafkaConsumerService \n\nKafkaConsumerService \n\nKafkaConsumerService  -->\n\nKafkaConsumerModule->KafkaConsumerService \n\n\n\n\n\nKafkaConsumerService\n\nKafkaConsumerService\n\nKafkaConsumerModule -->\n\nKafkaConsumerService->KafkaConsumerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/kafka-consumer/kafka-consumer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaConsumerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            KafkaClientModule\n                        \n                        \n                            KafkaProducerModule\n                        \n                        \n                            LogsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KafkaConsumerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaClientModule } from '@core/kafka-client/kafka-client.module';\nimport { KafkaProducerModule } from '@features/kafka-producer/kafka-producer.module';\nimport { KafkaConsumerService } from '@services/kafka-consumer/kafka-consumer.service';\nimport { LogsModule } from '@features/logs/logs.module';\n\n@Module({\n    imports: [KafkaClientModule.registerAsync(), KafkaProducerModule, LogsModule],\n    providers: [KafkaConsumerService],\n    exports: [KafkaConsumerService],\n})\nexport class KafkaConsumerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaConsumerService.html":{"url":"injectables/KafkaConsumerService.html","title":"injectable - KafkaConsumerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaConsumerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/kafka-consumer/kafka-consumer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consumeMessage\n                            \n                            \n                                    Private\n                                consumer\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToConsumer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafkaClientService: KafkaClientService, config: AppConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafkaClientService\n                                                  \n                                                        \n                                                                        KafkaClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectToConsumer\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectToConsumer(topic: string, groupId: string, fromBeginning: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/services/kafka-consumer/kafka-consumer.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fromBeginning\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/services/kafka-consumer/kafka-consumer.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        consumeMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        consumer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Consumer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaConsumerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { KafkaClientService } from '@core/kafka-client/kafka-client.service';\nimport { Consumer } from 'kafkajs';\nimport { AppConfigService } from '@core/app-config';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { LogsService } from '@features/logs/logs.service';\n\n@Injectable()\nexport class KafkaConsumerService implements OnModuleInit {\n    private readonly logger = new Logger(KafkaConsumerService.name);\n    private consumer: Consumer = null;\n\n    constructor(\n        private readonly kafkaClientService: KafkaClientService,\n        private readonly config: AppConfigService,\n        private readonly logsService: LogsService,\n    ) {}\n\n    async onModuleInit(): Promise {\n        try {\n            const kafkaConfigConsumer = this.config.get('KAFKA')?.consumer;\n            const topic = kafkaConfigConsumer?.topic;\n            const groupId = kafkaConfigConsumer?.groupId;\n\n            await this.connectToConsumer(topic, groupId, kafkaConfigConsumer?.fromBeginning);\n            await this.consumeMessage();\n        } catch (err) {\n            this.logger.error(`KafkaConsumerService | onModuleInit | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async connectToConsumer(topic: string, groupId: string, fromBeginning: boolean) {\n        try {\n            this.logger.log(\n                `KafkaConsumerService | connectToConsumer |  kafka consumer is trying to connect to topics: ${topic} as groupId: ${groupId}`,\n            );\n\n            this.consumer = this.kafkaClientService.getClient().consumer({\n                groupId,\n            });\n\n            await this.consumer.connect();\n            await this.consumer.subscribe({\n                topic,\n                fromBeginning,\n            });\n            this.logger.log(\n                `KafkaConsumerService | connectToConsumer | kafka consumer is connected to topics: ${topic} as groupId: ${groupId}`,\n            );\n        } catch (err) {\n            this.logger.error(\n                `KafkaConsumerService | connectToConsumer | kafka consumer can't connect to topic: ${topic} - error - ${getErrorMessage(\n                    err,\n                )}`,\n            );\n        }\n    }\n\n    consumeMessage = async () => {\n        await this.consumer.run({\n            eachMessage: async ({ topic, message, partition }) => {\n                try {\n                    this.logger.log(`KafkaConsumerService | consumeMessage | start`);\n\n                    const data = JSON.parse(message?.value.toString()) as unknown as LogDto;\n                    this.logger.log(\n                        `KafkaConsumerService | consumeMessage |  end - new message received from topics: ${topic}, from partition: ${partition}, message: ${JSON.stringify(\n                            data,\n                            null,\n                            4,\n                        )}`,\n                    );\n                    this.logsService\n                        .saveLog(data)\n                        .catch((error) =>\n                            this.logger.error(\n                                `KafkaConsumerService | consumeMessage | error when save log via logsService - ${getErrorMessage(error)}`,\n                            ),\n                        );\n                } catch (err) {\n                    this.logger.warn(\n                        `KafkaConsumerService | consumeMessage | error when new message received from topics: ${topic}, from partition: ${partition}, error: ${getErrorMessage(\n                            err,\n                        )}`,\n                    );\n                }\n            },\n        });\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KafkaProducerController.html":{"url":"controllers/KafkaProducerController.html","title":"controller - KafkaProducerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KafkaProducerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                producer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        send\n                        \n                    \n                \n            \n            \n                \nsend(body: SendLogRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SendLogRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { KafkaProducerService } from '@features/kafka-producer/kafka-producer.service';\nimport { SendLogRequestDto } from '@features/kafka-producer/dtos/send-log-request.dto';\n\n@Controller('producer')\nexport class KafkaProducerController {\n    constructor(private readonly kafkaProducerService: KafkaProducerService) {}\n\n    @Post()\n    send(@Body() body: SendLogRequestDto): Promise {\n        return this.kafkaProducerService.send(body);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaProducerModule.html":{"url":"modules/KafkaProducerModule.html","title":"module - KafkaProducerModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaProducerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KafkaProducerModule\n\n\n\ncluster_KafkaProducerModule_exports\n\n\n\ncluster_KafkaProducerModule_imports\n\n\n\ncluster_KafkaProducerModule_providers\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaProducerModule -->\n\nKafkaClientModule->KafkaProducerModule\n\n\n\n\n\nKafkaProducerService \n\nKafkaProducerService \n\nKafkaProducerService  -->\n\nKafkaProducerModule->KafkaProducerService \n\n\n\n\n\nKafkaProducerService\n\nKafkaProducerService\n\nKafkaProducerModule -->\n\nKafkaProducerService->KafkaProducerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaProducerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KafkaProducerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            KafkaClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KafkaProducerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaProducerController } from '@features/kafka-producer/kafka-producer.controller';\nimport { KafkaClientModule } from '@src/core/kafka-client/kafka-client.module';\nimport { KafkaProducerService } from '@features/kafka-producer/kafka-producer.service';\n\n@Module({\n    imports: [KafkaClientModule.registerAsync()],\n    controllers: [KafkaProducerController],\n    providers: [KafkaProducerService],\n    exports: [KafkaProducerService],\n})\nexport class KafkaProducerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaProducerService.html":{"url":"injectables/KafkaProducerService.html","title":"injectable - KafkaProducerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaProducerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                producer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafkaClientService: KafkaClientService, config: AppConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafkaClientService\n                                                  \n                                                        \n                                                                        KafkaClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(data: LogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaProducerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        producer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Producer\n\n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Producer, RecordMetadata } from 'kafkajs';\nimport { KafkaClientService } from '@src/core/kafka-client/kafka-client.service';\nimport { AppConfigService } from '@core/app-config';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\n\n@Injectable()\nexport class KafkaProducerService implements OnModuleInit {\n    private readonly logger = new Logger(KafkaProducerService.name);\n    private producer: Producer;\n\n    constructor(private readonly kafkaClientService: KafkaClientService, private readonly config: AppConfigService) {}\n\n    async onModuleInit(): Promise {\n        try {\n            await this.connect();\n        } catch (err) {\n            this.logger.error(`KafkaProducerService | onModuleInit | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    private async connect() {\n        try {\n            this.logger.log(`KafkaProducerService | connect | kafka producer is trying to connect`);\n            this.producer = this.kafkaClientService.getClient().producer();\n            await this.producer.connect();\n            this.logger.log(`KafkaProducerService | connect | kafka producer is connected`);\n        } catch (err) {\n            this.logger.error(`KafkaProducerService | connect | kafka producer can't connect - error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async send(data: LogDto): Promise {\n        try {\n            const topic = this.config.get('KAFKA')?.producer?.topic;\n            this.logger.log(\n                `KafkaProducerService | send | start - send message to the the topic: ${topic} - message: ${JSON.stringify(data)}`,\n            );\n\n            const response = await this.producer.send({\n                topic: topic,\n                messages: [{ key: uuidv4(), value: JSON.stringify(data) }],\n            });\n            this.logger.log(\n                `KafkaProducerService | send | end - send message to the the topic: ${topic} - message: ${JSON.stringify(data)}`,\n            );\n            return response;\n        } catch (err) {\n            const topic = this.config.get('KAFKA')?.producer?.topic;\n\n            this.logger.error(\n                `KafkaProducerService | send | error - send message to the the topic: ${topic} - error: ${getErrorMessage(err)}`,\n            );\n            throw err;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogBody.html":{"url":"interfaces/LogBody.html","title":"interface - LogBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/log-body.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            functionName\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LogBody {\n    functionName: string;\n    message: string;\n    payload?: { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogDto.html":{"url":"classes/LogDto.html","title":"class - LogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/dtos/log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                functionName\n                            \n                            \n                                message\n                            \n                            \n                                    Optional\n                                payload\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from 'class-validator';\n\nexport class LogDto {\n    @IsString()\n    functionName: string;\n\n    @IsString()\n    message: string;\n\n    @IsObject()\n    @IsOptional()\n    payload?: { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogProvider.html":{"url":"injectables/LogProvider.html","title":"injectable - LogProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/log.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                saveLog\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DbServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/features/logs/log.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DbServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLog(data: LogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/log.provider.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/log.provider.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LogProvider.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/logs/log.provider.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { DbServiceInterface } from '@services/db/interfaces/db-service-interface';\n\n@Injectable()\nexport class LogProvider {\n    private readonly logger = new Logger(LogProvider.name);\n\n    constructor(@Inject('DbServiceInterface') private readonly dbService: DbServiceInterface) {}\n\n    async saveLog(data: LogDto) {\n        try {\n            this.logger.log(`LogProvider | saveLog | start`);\n            const response = await this.dbService.insert(data, 'logs');\n            this.logger.log(`LogProvider | saveLog | end`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogProvider | saveLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string) {\n        try {\n            this.logger.log(`LogProvider | search | start`);\n            const response = await this.dbService.search(text, 'logs');\n            this.logger.log(`LogProvider | search | end`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogProvider | search | error - ${getErrorMessage(err)}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogSearchResult.html":{"url":"interfaces/LogSearchResult.html","title":"interface - LogSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/log-result.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         LogBody[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogBody[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LogBody } from '@services/db/interfaces/log-body';\n\nexport interface LogSearchResult {\n    total: number;\n    result: LogBody[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LogsController.html":{"url":"controllers/LogsController.html","title":"controller - LogsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LogsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/logs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                logs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(input: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':input')\n                \n            \n\n            \n                \n                    Defined in src/features/logs/logs.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { LogsService } from '@features/logs/logs.service';\n\n@Controller('logs')\nexport class LogsController {\n    constructor(private readonly logsService: LogsService) {}\n    @Get(':input')\n    search(@Param('input') input: string) {\n        return this.logsService.search(input);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogsModule.html":{"url":"modules/LogsModule.html","title":"module - LogsModule","body":"\n                   \n\n\n\n\n    Modules\n    LogsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogsModule\n\n\n\ncluster_LogsModule_imports\n\n\n\ncluster_LogsModule_providers\n\n\n\ncluster_LogsModule_exports\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nLogsModule\n\nLogsModule\n\nLogsModule -->\n\nDbModule->LogsModule\n\n\n\n\n\nLogsService \n\nLogsService \n\nLogsService  -->\n\nLogsModule->LogsService \n\n\n\n\n\nLogProvider\n\nLogProvider\n\nLogsModule -->\n\nLogProvider->LogsModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/logs/logs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LogProvider\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LogsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LogsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LogsController } from '@features/logs/logs.controller';\nimport { LogsService } from '@features/logs/logs.service';\nimport { DbModule } from '@services/db/db.module';\nimport { LogProvider } from '@features/logs/log.provider';\n\n@Module({\n    imports: [DbModule],\n    controllers: [LogsController],\n    providers: [LogsService, LogProvider],\n    exports: [LogsService],\n})\nexport class LogsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                saveLog\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logProvider: LogProvider)\n                    \n                \n                        \n                            \n                                Defined in src/features/logs/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logProvider\n                                                  \n                                                        \n                                                                        LogProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLog(data: LogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/logs.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/logs.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LogsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/logs/logs.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { getErrorMessage, handlerGeneralException } from '@src/shared/utils';\nimport { LogProvider } from '@features/logs/log.provider';\n\n@Injectable()\nexport class LogsService {\n    private readonly logger = new Logger(LogsService.name);\n\n    constructor(private readonly logProvider: LogProvider) {}\n\n    async saveLog(data: LogDto) {\n        try {\n            this.logger.log(`LogsService | saveLog | start`);\n            const response = await this.logProvider.saveLog(data);\n            this.logger.log(`LogsService | saveLog | end - log id ${response?._id} saved`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogsService | saveLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string) {\n        try {\n            this.logger.log(`LogsService | search | start to search ${text}`);\n            const response = await this.logProvider.search(text);\n            this.logger.log(`LogsService | search | end to search ${text}`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogsService | search | error - ${getErrorMessage(err)}`);\n            handlerGeneralException(err);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootObjectSearchResult.html":{"url":"interfaces/RootObjectSearchResult.html","title":"interface - RootObjectSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RootObjectSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _shards\n                                        \n                                \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            timed_out\n                                        \n                                \n                                \n                                        \n                                            took\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _shards\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _shards:         Shards\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Shards\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:         Hits\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hits\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timed_out\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timed_out:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        took\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        took:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchReturn.html":{"url":"interfaces/SearchReturn.html","title":"interface - SearchReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SearchReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         Entity[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Entity[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendLogRequestDto.html":{"url":"classes/SendLogRequestDto.html","title":"class - SendLogRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendLogRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/dtos/send-log-request.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LogDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                functionName\n                            \n                            \n                                message\n                            \n                            \n                                    Optional\n                                payload\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:12\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LogDto } from '@features/kafka-producer/dtos/log.dto';\n\nexport class SendLogRequestDto extends LogDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Shards.html":{"url":"interfaces/Shards.html","title":"interface - Shards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Shards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            failed\n                                        \n                                \n                                \n                                        \n                                            skipped\n                                        \n                                \n                                \n                                        \n                                            successful\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        failed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        failed:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipped\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipped:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        successful\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        successful:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            functionName\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeExecutionInterceptor.html":{"url":"injectables/TimeExecutionInterceptor.html","title":"injectable - TimeExecutionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeExecutionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/time-execution.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/time-execution.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TimeExecutionInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/interceptors/time-execution.interceptor.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class TimeExecutionInterceptor implements NestInterceptor {\n    private readonly logger = new Logger(TimeExecutionInterceptor.name);\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const controller = context.getHandler()?.name;\n        const start = Date.now();\n        return next.handle().pipe(\n            tap(() => {\n                const end = Date.now();\n                const message = `[controller]: ${controller} - [time execution]: ${end - start}ms`;\n                if(controller !== 'livenessCheck')\n                    return this.logger.log(`TimeExecutionInterceptor | intercept | ${message}`);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {CallHandler, ExecutionContext, Injectable, NestInterceptor, RequestTimeoutException} from '@nestjs/common';\nimport {catchError, Observable, throwError, timeout, TimeoutError} from 'rxjs';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(60000),\n            catchError(err => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Total.html":{"url":"interfaces/Total.html","title":"interface - Total","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Total\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            relation\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        relation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/app-config/app-config.service.ts\n            \n            injectable\n            AppConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/config/config.ts\n            \n            variable\n            envConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/config.ts\n            \n            variable\n            finalConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/dev.config.ts\n            \n            variable\n            ELASTICSEARCH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/dev.config.ts\n            \n            variable\n            KAFKA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/http.exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/time-execution.interceptor.ts\n            \n            injectable\n            TimeExecutionInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/kafka-client/constant.ts\n            \n            variable\n            KAFKA_CLIENT_REGISTRATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/kafka-client/kafka-client.module.ts\n            \n            variable\n            KafkaClientRegistration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/kafka-client/kafka-client.service.ts\n            \n            injectable\n            KafkaClientService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/dtos/log.dto.ts\n            \n            class\n            LogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/dtos/send-log-request.dto.ts\n            \n            class\n            SendLogRequestDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/kafka-producer.controller.ts\n            \n            controller\n            KafkaProducerController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/kafka-producer.service.ts\n            \n            injectable\n            KafkaProducerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/logs/log.provider.ts\n            \n            injectable\n            LogProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/logs/logs.controller.ts\n            \n            controller\n            LogsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/logs/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/db/db.module.ts\n            \n            variable\n            dbProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/db/db.service.ts\n            \n            injectable\n            DbService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/db-service-interface.ts\n            \n            interface\n            DbServiceInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Entity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Hit\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Hits\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            RootObjectSearchResult\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            SearchReturn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Shards\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Source\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Total\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/log-body.ts\n            \n            interface\n            LogBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/log-result.ts\n            \n            interface\n            LogSearchResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/kafka-consumer/kafka-consumer.service.ts\n            \n            injectable\n            KafkaConsumerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/utils.ts\n            \n            function\n            handlerGeneralException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/utils.ts\n            \n            variable\n            getErrorMessage\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @elastic/elasticsearch : ^8.2.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/elasticsearch : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            kafkajs : ^2.0.0\n        \n            lodash : ^4.17.21\n        \n            moment : ^2.29.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENVIRONMENT_TYPES   (src/.../config.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/config/config.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ENVIRONMENT_TYPES\n                    \n                \n                        \n                            \n                                 DEVELOPMENT_LOCAL\n                            \n                        \n                        \n                            \n                                Value : dev\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            handlerGeneralException   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handlerGeneralException\n                        \n                    \n                \n            \n            \n                \nhandlerGeneralException(e: any, message?: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nThis app is a pipeline that has two functionalities:\n\nget some logs from queue (kafka), and save them in database (elastic search), \nsearch logs by some text\n\nWhy I choose queue rather than http for logs injection?\nIf our server is offline, we lose the messages, but with queue the messages will still be in the queue until we acknowledge them\nWhy I use Kafka rather than pub/sub?\n\nKafka is open source\nKafka can implement schema registry\nKafka work with partitions and parallelization works better\nKafka has retention process for messages, in contrasts with pub/sub when we acknowledge the message, it goes\n\n Why I choose Elasticsearch:\n\nElasticsearch is no-sql so it is perfect for storing unstructured data\nElasticsearch is very powerfull for search, and very powerfull for data analyse so it's perfect for logs\n But Mongo could be also a good choise\n\nInstallation\nNo installation is needed if you're running the app via docker. If not you can run:\nnpm ciImportant\nBe careful to increase your memory in docker desktop up to 4Gb to avoid crashing of elastic search container\nRunning the app\ndocker compose up --buildPostman\nYou can import logs.postman_collection.json (from root project ) to postman to test this server\nNote\nI Implemented a producer for kafka just for the dev, so you have a way to produce message to kafka easily\nArchitecture Design\n\n\nScalability\nKafka:\n\nif we want to get the correct scale we have to run load test and increase the number of partition in function of the load test result\n\nNestjs:\n\nwe can deploy our server via kubernetes, and choose the right config for HorizontalPodAutoscaler, so we can increase our pod instances in function of cpu or memory utilisation\n\nElasticsearch:\n\nabout elasticsearch we could use a managed database\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaConsumerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaProducerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\ncluster_AppConfigModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_KafkaConsumerModule\n\n\n\ncluster_KafkaConsumerModule_exports\n\n\n\ncluster_KafkaConsumerModule_providers\n\n\n\ncluster_KafkaProducerModule\n\n\n\ncluster_KafkaProducerModule_exports\n\n\n\ncluster_KafkaProducerModule_providers\n\n\n\ncluster_LogsModule\n\n\n\ncluster_LogsModule_imports\n\n\n\ncluster_LogsModule_exports\n\n\n\ncluster_LogsModule_providers\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nKafkaConsumerModule -->\n\nKafkaClientModule->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaProducerModule -->\n\nKafkaClientModule->KafkaProducerModule\n\n\n\nAppModule -->\n\nKafkaClientModule->AppModule\n\n\n\nAppModule -->\n\nKafkaConsumerModule->AppModule\n\n\n\n\n\nKafkaConsumerService \n\nKafkaConsumerService \n\nKafkaConsumerService  -->\n\nKafkaConsumerModule->KafkaConsumerService \n\n\n\nKafkaConsumerModule -->\n\nKafkaProducerModule->KafkaConsumerModule\n\n\n\nAppModule -->\n\nKafkaProducerModule->AppModule\n\n\n\n\n\nKafkaProducerService \n\nKafkaProducerService \n\nKafkaProducerService  -->\n\nKafkaProducerModule->KafkaProducerService \n\n\n\n\n\nLogsModule\n\nLogsModule\n\nKafkaConsumerModule -->\n\nLogsModule->KafkaConsumerModule\n\n\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nLogsService \n\nLogsService \n\nLogsService  -->\n\nLogsModule->LogsService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nKafkaConsumerService\n\nKafkaConsumerService\n\nKafkaConsumerModule -->\n\nKafkaConsumerService->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerService\n\nKafkaProducerService\n\nKafkaProducerModule -->\n\nKafkaProducerService->KafkaProducerModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nLogsModule -->\n\nDbModule->LogsModule\n\n\n\n\n\nLogProvider\n\nLogProvider\n\nLogsModule -->\n\nLogProvider->LogsModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dbProvider   (src/.../db.module.ts)\n                        \n                        \n                            ELASTICSEARCH   (src/.../dev.config.ts)\n                        \n                        \n                            envConfig   (src/.../config.ts)\n                        \n                        \n                            finalConfig   (src/.../config.ts)\n                        \n                        \n                            getErrorMessage   (src/.../utils.ts)\n                        \n                        \n                            KAFKA   (src/.../dev.config.ts)\n                        \n                        \n                            KAFKA_CLIENT_REGISTRATION   (src/.../constant.ts)\n                        \n                        \n                            KafkaClientRegistration   (src/.../kafka-client.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/db/db.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dbProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: 'DbServiceInterface',\n    useClass: DbService,\n}\n                    \n                \n\n\n        \n    \n\n    src/core/config/dev.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ELASTICSEARCH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    node: 'http://esOne:9200',\n    username: 'elastic',\n    password: 'admin',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        KAFKA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    client: {\n        clientId: 'log_pipeline',\n        brokersList: ['kafka:9092'],\n    },\n    consumer: {\n        groupId: 'dev-1',\n        topic: 'logs-topic',\n        fromBeginning: true,\n    },\n    producer: {\n        topic: 'logs-topic',\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/core/config/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envConfig\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finalConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { ...globalConfig, ...envConfig }\n                    \n                \n\n\n        \n    \n\n    src/shared/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getErrorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (err) => {\n    return err instanceof Error ? err.message : JSON.stringify(err);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/kafka-client/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KAFKA_CLIENT_REGISTRATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'KAFKA_CLIENT_REGISTRATION'\n                    \n                \n\n\n        \n    \n\n    src/core/kafka-client/kafka-client.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KafkaClientRegistration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: KAFKA_CLIENT_REGISTRATION,\n    useFactory: (kafkaClientService: KafkaClientService) => {\n        return kafkaClientService.register();\n    },\n    inject: [KafkaClientService],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
