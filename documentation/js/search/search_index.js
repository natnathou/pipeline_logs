var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppConfigModule.html",[0,1.14,1,1.965]],["body/modules/AppConfigModule.html",[0,1.681,1,3.725,2,1.654,3,2.489,4,3.31,5,3.31,6,3.31,7,3.136,8,0.024,9,2.896,10,2.207,11,2.207,12,0.281,13,0.185,14,0.248,15,2.922,16,2.922,17,3.9,18,2.679,19,2.896,20,0.91,21,5.116,22,0.774,23,3.31,24,3.9,25,3.9,26,2.922,27,3.833,28,3.9,29,2.207,30,3.9,31,3.9,32,2.632,33,3.31,34,0.281,35,0.501,36,0.017,37,0.017]],["title/injectables/AppConfigService.html",[7,1.575,38,0.736]],["body/injectables/AppConfigService.html",[7,2.076,8,0.024,12,0.238,13,0.156,14,0.21,15,4.456,16,4.456,20,0.687,22,0.656,26,2.476,34,0.238,35,0.425,36,0.015,37,0.015,38,0.97,39,1.313,40,2.805,41,0.327,42,0.849,43,2.381,44,1.955,45,2.57,46,1.328,47,5.664,48,1.731,49,2.805,50,5.664,51,1.453,52,4.576,53,1.724,54,1.724,55,0.675,56,1.346,57,2.396,58,4.576,59,1.221,60,3.305,61,1.6,62,1.249,63,4.576,64,1.432,65,3.305,66,2.23,67,1.402,68,1.704,69,4.576,70,1.608,71,1.086,72,3.305,73,3.305,74,3.305,75,3.305]],["title/controllers/AppController.html",[76,1.689,77,2.343]],["body/controllers/AppController.html",[8,0.024,12,0.319,13,0.209,14,0.281,20,0.833,22,0.878,34,0.319,35,0.569,36,0.019,37,0.019,41,0.438,44,1.648,46,1.611,51,1.135,59,1.101,62,1.208,70,2.153,71,1.454,76,2.7,77,3.744,78,2.317,79,3.756,80,5.393,81,2.724,82,4.426,83,3.43,84,3.756,85,4.426]],["title/modules/AppModule.html",[0,1.14,86,2.343]],["body/modules/AppModule.html",[0,1.385,1,3.354,2,1.248,3,2.051,8,0.024,9,2.386,10,1.665,11,1.665,12,0.212,13,0.139,14,0.187,18,2.208,20,0.98,22,0.584,29,2.386,32,1.985,34,0.212,35,0.378,36,0.014,37,0.014,57,1.541,68,1.096,77,3.325,78,2.208,83,3.354,84,2.497,86,4.579,87,2.497,88,2.497,89,2.497,90,3.103,91,3.647,92,3.354,93,3.354,94,2.942,95,4.216,96,2.942,97,1.985,98,1.335,99,2.204,100,1.335,101,1.665,102,2.497,103,1.811,104,2.497,105,1.985,106,2.942,107,4.926,108,4.216,109,2.497,110,2.497,111,2.845,112,2.942,113,2.845,114,2.942,115,2.942,116,3.325,117,2.942,118,2.942,119,3.158]],["title/injectables/AppService.html",[38,0.736,83,1.965]],["body/injectables/AppService.html",[8,0.024,12,0.335,13,0.22,14,0.295,20,0.697,22,0.923,34,0.335,35,0.597,36,0.019,37,0.019,38,1.212,39,1.846,41,0.46,46,1.66,51,1.192,59,1.135,62,1.268,71,1.527,80,5.487,83,3.237,120,3.945,121,4.648,122,4.648,123,4.648]],["title/modules/DbModule.html",[0,1.14,124,2.136]],["body/modules/DbModule.html",[0,1.729,1,2.978,2,1.727,7,2.645,8,0.024,12,0.293,13,0.193,14,0.259,18,2.132,19,2.305,20,0.925,22,0.808,29,2.978,34,0.293,35,0.523,36,0.018,37,0.018,57,2.755,103,2.506,116,2.748,119,3.051,124,3.238,125,3.051,126,5.261,127,3.051,128,2.978,129,4.072,130,1.727,131,4.367,132,2.132,133,4.072,134,3.051,135,2.305,136,3.456,137,4.072,138,2.748]],["title/injectables/DbService.html",[38,0.736,128,1.965]],["body/injectables/DbService.html",[8,0.024,12,0.164,13,0.108,14,0.145,20,0.811,22,0.453,34,0.164,35,0.293,36,0.012,37,0.012,38,0.74,39,0.907,41,0.61,42,0.648,43,1.925,44,1.77,45,2.156,46,1.014,48,1.195,51,1.219,53,1.394,54,1.394,55,0.545,56,1.088,59,1.18,62,0.953,64,0.55,67,0.968,68,1.301,70,1.111,71,1.394,127,1.71,128,1.977,130,1.799,132,1.829,135,3.057,139,1.937,140,2.965,141,2.899,142,2.283,143,5.402,144,3.493,145,2.965,146,2.283,147,3.207,148,2.925,149,2.357,150,2.283,151,2.15,152,3.493,153,1.405,154,1.937,155,1.195,156,1.405,157,0.85,158,1.301,159,2.283,160,1.937,161,1.54,162,0.369,163,1.292,164,2.15,165,4.752,166,4.242,167,1.977,168,2.611,169,2.15,170,2.283,171,1.977,172,1.977,173,1.829,174,3.493,175,1.829,176,2.15,177,2.283,178,3.493,179,2.283,180,2.283,181,2.283,182,0.85,183,0.896,184,2.283,185,1.937,186,1.977,187,0.85,188,2.283,189,0.907,190,0.907,191,2.283,192,1.036,193,2.283,194,2.283,195,2.283,196,2.283,197,0.85,198,2.283]],["title/interfaces/DbServiceInterface.html",[132,1.818,162,0.56]],["body/interfaces/DbServiceInterface.html",[8,0.023,12,0.285,13,0.187,14,0.252,20,0.594,34,0.285,36,0.017,37,0.017,41,0.653,46,1.5,51,1.325,53,1.698,54,1.698,55,0.664,56,1.325,59,1.345,62,1.41,132,2.706,140,4.386,141,2.925,145,4.386,147,2.673,148,3.752,149,3.487,151,2.438,157,1.475,158,1.475,161,3.882,162,0.639,199,1.475,200,4.882,201,3.362,202,3.961,203,3.961,204,3.961]],["title/interfaces/Entity.html",[157,1.293,162,0.56]],["body/interfaces/Entity.html",[8,0.024,12,0.228,13,0.242,14,0.201,34,0.458,36,0.015,37,0.015,41,0.313,42,0.823,55,0.78,56,1.556,59,1.354,61,1.105,64,0.761,157,1.909,158,1.177,162,1.027,182,2.18,183,1.501,187,2.18,189,2.567,190,1.256,192,2.655,197,2.069,199,1.177,205,1.434,206,2.994,207,1.881,208,1.538,209,1.538,210,1.538,211,1.538,212,1.881,213,1.538,214,1.538,215,1.538,216,2.356,217,1.538,218,1.341,219,1.538,220,1.538,221,1.434,222,1.538]],["title/interfaces/Hit.html",[162,0.56,212,1.472]],["body/interfaces/Hit.html",[8,0.024,12,0.233,13,0.279,14,0.206,34,0.461,36,0.015,37,0.015,41,0.321,42,0.838,55,0.722,59,1.342,61,1.134,64,0.781,157,1.682,158,1.207,162,1.033,182,1.682,183,1.158,187,2.2,189,2.642,190,1.287,192,2.68,197,1.207,199,1.207,205,1.471,207,1.915,208,1.578,209,1.578,210,1.578,211,1.578,212,2.203,213,2.734,214,2.734,215,2.734,216,2.382,217,1.578,218,1.375,219,1.578,220,1.578,221,1.471,222,1.578]],["title/interfaces/Hits.html",[162,0.56,216,1.472]],["body/interfaces/Hits.html",[8,0.024,12,0.239,13,0.249,14,0.211,34,0.463,36,0.016,37,0.016,41,0.328,42,0.851,55,0.676,59,1.297,61,1.159,64,0.799,157,1.708,158,1.235,162,1.039,182,1.708,183,1.176,187,2.463,189,2.653,190,1.317,192,2.081,197,1.235,199,1.235,205,1.504,207,1.945,208,1.613,209,1.613,210,1.613,211,1.613,212,2.405,213,1.613,214,1.613,215,1.613,216,2.729,217,2.76,218,1.406,219,1.613,220,1.613,221,1.504,222,1.613]],["title/classes/HttpExceptionFilter.html",[35,0.446,223,2.601]],["body/classes/HttpExceptionFilter.html",[8,0.024,12,0.214,13,0.141,14,0.189,20,0.744,22,0.591,32,2.009,34,0.214,35,0.383,36,0.014,37,0.014,41,0.294,42,0.789,43,2.25,44,1.847,45,2.454,46,1.234,51,1.09,53,0.978,54,0.978,55,0.383,56,0.763,62,0.812,64,0.717,66,2.009,67,1.262,68,1.583,130,2.426,163,2.406,168,2.616,172,3.061,175,2.226,183,1.387,223,3.715,224,2.009,225,2.526,226,4.958,227,4.251,228,2.977,229,4.251,230,5.409,231,4.958,232,5.409,233,2.977,234,2.977,235,4.251,236,2.526,237,3.608,238,2.977,239,2.977,240,2.977,241,2.977,242,2.977,243,5.949,244,2.977,245,2.977,246,2.23,247,4.958,248,4.251,249,4.251,250,2.977,251,4.251,252,2.977,253,4.251,254,4.251,255,4.251,256,2.977,257,2.977,258,2.977,259,2.977,260,2.977,261,2.977,262,2.977,263,2.977,264,2.977,265,2.977,266,2.977,267,2.977]],["title/modules/KafkaClientModule.html",[0,1.14,90,1.818]],["body/modules/KafkaClientModule.html",[0,1.869,2,1.641,8,0.024,12,0.279,13,0.183,14,0.246,18,2.027,19,2.191,20,0.854,22,0.768,34,0.366,35,0.497,36,0.017,37,0.017,46,1.124,51,0.992,62,1.056,71,1.672,90,2.978,97,3.435,98,2.581,116,2.612,130,1.641,134,2.9,138,2.612,268,2.881,269,2.9,270,5.09,271,5.688,272,3.87,273,5.688,274,4.321,275,3.375,276,2.9,277,3.814,278,3.87,279,3.814,280,3.285]],["title/injectables/KafkaClientService.html",[38,0.736,275,1.818]],["body/injectables/KafkaClientService.html",[7,2.464,8,0.024,12,0.216,13,0.142,14,0.191,20,0.748,22,0.596,34,0.216,35,0.386,36,0.014,37,0.014,38,0.907,39,1.193,41,0.297,42,0.794,43,2.707,44,2.023,45,2.464,46,1.242,48,1.572,49,2.549,51,1.53,53,0.987,54,0.987,55,0.55,56,0.77,57,2.609,62,1.36,64,0.723,66,2.887,67,1.273,68,1.856,70,1.461,71,1.405,98,2.785,103,1.848,130,1.273,268,3.475,275,2.24,281,2.549,282,4.229,283,5.43,284,5.43,285,5.43,286,4.278,287,3.003,288,4.229,289,3.003,290,3.377,291,3.003,292,3.003,293,4.278,294,2.026,295,3.003,296,3.003,297,4.278,298,2.549,299,3.003,300,4.278,301,3.003,302,3.003,303,3.003,304,3.003,305,3.003]],["title/modules/KafkaConsumerModule.html",[0,1.14,91,2.136]],["body/modules/KafkaConsumerModule.html",[0,1.578,2,1.504,3,2.337,8,0.024,9,2.718,10,2.008,11,2.008,12,0.255,13,0.168,14,0.225,18,2.515,19,2.718,20,0.915,22,0.704,29,2.718,34,0.255,35,0.456,36,0.016,37,0.016,90,3.193,91,4.219,92,3.558,93,3.558,97,2.394,98,1.609,99,2.657,100,1.609,101,2.008,102,3.011,104,3.011,105,3.241,110,3.011,306,3.011,307,3.547,308,3.011,309,3.011,310,4.192,311,2.657,312,3.547,313,3.547,314,3.011]],["title/injectables/KafkaConsumerService.html",[38,0.736,310,2.136]],["body/injectables/KafkaConsumerService.html",[7,1.874,8,0.024,12,0.127,13,0.084,14,0.112,20,0.766,22,0.351,34,0.127,35,0.228,36,0.01,37,0.01,38,0.606,39,0.703,41,0.175,42,0.531,43,2.488,44,1.806,45,1.874,46,0.83,48,1.498,51,1.243,53,0.94,54,0.94,55,0.462,56,0.733,57,2.163,59,0.962,62,0.78,64,0.867,67,1.526,68,1.538,97,1.195,98,0.803,100,0.803,103,1.09,105,3.443,130,1.752,135,3.006,148,1.76,155,1.884,156,1.09,163,1.002,164,2.214,167,1.002,169,2.79,171,1.002,172,2.036,173,2.374,175,2.374,176,1.09,183,1.059,186,1.619,221,1.632,246,2.143,275,2.539,276,1.327,290,2.036,294,1.195,310,3.268,311,3.823,315,1.503,316,5.102,317,4.655,318,4.533,319,4.331,320,1.503,321,2.781,322,2.86,323,2.86,324,4.78,325,3.506,326,1.771,327,4.22,328,1.771,329,1.771,330,3.598,331,2.86,332,1.771,333,1.498,334,1.195,335,1.327,336,1.771,337,1.771,338,1.771,339,1.771,340,1.771,341,1.771,342,1.771,343,1.771,344,3.054,345,1.503,346,2.427,347,4.131,348,1.771,349,1.771,350,1.771,351,1.771,352,1.503,353,1.503,354,1.771,355,1.771,356,3.848,357,1.771,358,1.771,359,1.327,360,2.86,361,1.503,362,1.771,363,1.771,364,1.327,365,1.771,366,1.503,367,1.002,368,1.503,369,1.771,370,1.771]],["title/controllers/KafkaProducerController.html",[76,1.689,371,2.343]],["body/controllers/KafkaProducerController.html",[8,0.024,12,0.282,13,0.185,14,0.249,20,0.858,22,0.777,34,0.282,35,0.503,36,0.017,37,0.017,41,0.387,44,1.458,46,1.489,51,1.004,53,1.286,54,1.286,55,0.503,56,1.004,62,1.068,70,1.905,71,1.286,76,1.905,78,2.05,81,2.409,100,2.327,101,3.237,147,3.86,148,3.156,367,2.216,371,3.461,372,2.903,373,3.323,374,3.323,375,2.642,376,4.353,377,3.915,378,3.736,379,5.72,380,3.915,381,3.237,382,3.323,383,2.642,384,3.323,385,3.915,386,3.915,387,3.915]],["title/modules/KafkaProducerModule.html",[0,1.14,92,1.965]],["body/modules/KafkaProducerModule.html",[0,1.644,2,1.599,3,2.434,8,0.024,9,2.832,10,2.134,11,2.134,12,0.271,13,0.178,14,0.24,18,2.62,19,2.832,20,0.897,22,0.748,29,2.832,34,0.271,35,0.485,36,0.017,37,0.017,78,2.62,90,3.259,92,3.797,98,1.71,99,2.825,100,2.27,101,3.178,268,2.134,314,3.2,371,3.789,372,2.134,381,3.892,382,3.2,388,3.2,389,3.2,390,3.77,391,3.2,392,3.77,393,3.77]],["title/injectables/KafkaProducerService.html",[38,0.736,381,1.965]],["body/injectables/KafkaProducerService.html",[7,1.987,8,0.024,12,0.141,13,0.093,14,0.125,20,0.798,22,0.389,34,0.141,35,0.252,36,0.01,37,0.01,38,0.658,39,0.779,41,0.194,42,0.576,43,2.637,44,1.777,45,1.987,46,0.901,48,1.027,51,1.301,53,1.02,54,1.02,55,0.495,56,0.796,57,2.293,61,1.774,62,1.051,64,0.748,67,0.832,68,1.156,70,0.955,71,0.644,98,0.89,100,0.89,101,3.008,103,1.207,130,1.857,135,3.212,148,2.695,155,1.027,156,1.207,163,1.11,164,2.371,167,1.11,168,1.91,169,2.371,171,1.11,172,2.18,173,2.017,175,2.293,176,2.371,183,1.301,186,2.479,246,1.47,268,1.11,275,2.657,276,1.47,290,2.18,294,1.324,319,4.512,320,1.665,327,4.354,344,2.635,345,1.665,346,4.817,352,1.665,353,1.665,361,3.269,367,1.11,372,3.008,375,3.829,376,4.678,378,2.695,381,2.701,383,1.324,384,1.665,394,1.665,395,3.104,396,1.962,397,1.962,398,3.104,399,1.962,400,3.104,401,1.962,402,1.962,403,1.962,404,3.104,405,1.962,406,1.324,407,1.962,408,3.104,409,3.104,410,1.962,411,1.962,412,1.962,413,3.104,414,3.852,415,1.962,416,1.962,417,1.665,418,1.962,419,1.665]],["title/interfaces/LogBody.html",[153,2.136,162,0.56]],["body/interfaces/LogBody.html",[8,0.023,12,0.314,13,0.207,14,0.278,34,0.314,36,0.019,37,0.019,41,0.432,42,1.022,55,0.838,56,1.411,59,1.341,61,1.528,153,3.387,162,0.705,182,2.356,183,1.622,197,2.356,199,1.627,206,3.714,420,3.273,421,3.708]],["title/classes/LogDto.html",[35,0.446,333,1.818]],["body/classes/LogDto.html",[8,0.024,12,0.286,13,0.188,14,0.253,20,0.597,34,0.286,35,0.666,36,0.018,37,0.018,41,0.393,42,0.962,51,1.478,55,0.785,56,1.329,59,1.257,61,1.39,81,3.547,182,2.147,183,1.478,197,2.147,206,2.683,224,2.683,333,2.713,372,3.456,422,3.375,423,5.375,424,3.976,425,3.976,426,3.375,427,3.976,428,5.181,429,5.181,430,2.979]],["title/injectables/LogProvider.html",[38,0.736,431,1.965]],["body/injectables/LogProvider.html",[8,0.024,12,0.198,13,0.13,14,0.174,20,0.782,22,0.545,34,0.198,35,0.353,36,0.014,37,0.014,38,0.85,39,1.09,41,0.271,42,0.744,43,2.363,44,1.94,45,2.363,46,1.164,48,1.437,51,1.336,53,1.556,54,1.556,55,0.609,56,1.214,59,0.94,62,1.094,64,0.661,67,1.164,68,1.493,71,1.317,100,1.245,128,2.269,130,1.7,132,2.727,135,3.275,138,1.852,141,3.136,149,2.705,151,1.689,155,1.437,156,1.689,160,2.329,161,1.852,162,0.443,164,2.467,167,2.269,168,3.205,169,2.467,171,2.269,172,2.269,173,2.099,175,2.099,176,2.467,186,1.553,333,2.727,334,1.852,359,3.003,364,3.003,431,2.269,432,2.329,433,4.702,434,2.744,435,4.008,436,2.744,437,2.744,438,4.008,439,2.744,440,5.208,441,2.744,442,2.705,443,4.008,444,2.744]],["title/interfaces/LogSearchResult.html",[162,0.56,445,2.601]],["body/interfaces/LogSearchResult.html",[8,0.023,12,0.329,13,0.216,14,0.29,20,0.685,34,0.329,36,0.019,37,0.019,41,0.451,42,1.05,55,0.727,147,3.08,153,3.954,154,3.874,162,0.737,187,2.393,189,2.441,190,2.551,199,1.7,420,3.42,445,4.237,446,3.874]],["title/controllers/LogsController.html",[76,1.689,447,2.343]],["body/controllers/LogsController.html",[8,0.024,12,0.302,13,0.198,14,0.266,20,0.804,22,0.831,34,0.302,35,0.538,36,0.018,37,0.018,41,0.414,44,1.56,46,1.555,51,1.074,53,1.376,54,1.376,55,0.538,56,1.074,59,1.173,62,1.143,70,2.038,71,1.376,76,2.038,78,2.193,81,2.578,141,3.033,321,3.094,335,3.138,374,3.556,442,2.827,447,3.616,448,3.556,449,4.189,450,5.358,451,4.189,452,5.358,453,4.189,454,4.189,455,4.189,456,4.189]],["title/modules/LogsModule.html",[0,1.14,93,1.965]],["body/modules/LogsModule.html",[0,1.624,2,1.57,3,2.405,8,0.024,9,2.797,10,2.095,11,2.095,12,0.266,13,0.175,14,0.235,18,2.588,19,2.797,20,0.928,22,0.735,29,2.797,34,0.266,35,0.476,36,0.017,37,0.017,78,2.588,93,3.854,124,3.917,321,3.591,335,2.773,431,3.602,447,3.755,457,3.142,458,3.142,459,3.142,460,3.142,461,3.702,462,3.702,463,3.702,464,3.142]],["title/injectables/LogsService.html",[38,0.736,321,1.818]],["body/injectables/LogsService.html",[8,0.024,12,0.195,13,0.128,14,0.172,20,0.778,22,0.539,34,0.195,35,0.349,36,0.013,37,0.013,38,0.843,39,1.078,41,0.269,42,0.738,43,2.135,44,1.93,45,2.351,46,1.154,48,1.422,51,1.329,53,1.546,54,1.546,55,0.605,56,1.207,59,0.934,62,1.085,64,0.654,67,1.151,68,1.481,70,1.321,71,1.307,100,1.232,130,1.686,135,3.262,141,3.37,149,2.684,151,2.897,155,1.422,156,1.671,164,2.448,167,2.251,168,3.189,169,2.448,171,2.251,172,2.251,173,2.083,175,2.083,176,2.448,186,1.537,321,2.083,333,2.713,334,1.832,359,2.98,364,2.98,367,1.537,406,1.832,419,2.304,431,3.262,433,4.682,464,2.304,465,2.304,466,2.715,467,3.977,468,2.715,469,2.715,470,3.977,471,5.182,472,2.715,473,2.715,474,2.715,475,2.715,476,3.977,477,2.715]],["title/interfaces/RootObjectSearchResult.html",[162,0.56,218,1.472]],["body/interfaces/RootObjectSearchResult.html",[8,0.024,12,0.233,13,0.246,14,0.206,34,0.461,36,0.015,37,0.015,41,0.321,42,0.838,55,0.722,59,1.29,61,1.134,64,0.781,157,1.682,158,1.207,162,1.033,182,1.682,183,1.158,187,2.2,189,2.642,190,1.287,192,2.048,197,1.207,199,1.207,205,1.471,207,2.382,208,1.578,209,1.578,210,1.578,211,1.578,212,1.915,213,1.578,214,1.578,215,1.578,216,2.756,217,1.578,218,1.915,219,2.734,220,2.734,221,2.357,222,2.734]],["title/interfaces/SearchReturn.html",[158,1.293,162,0.56]],["body/interfaces/SearchReturn.html",[8,0.024,12,0.244,13,0.252,14,0.216,34,0.466,36,0.016,37,0.016,41,0.336,42,0.865,55,0.599,59,1.303,61,1.187,64,0.817,157,2.134,158,1.735,162,1.045,182,1.735,183,1.195,187,2.41,189,2.664,190,2.275,192,2.114,197,1.264,199,1.264,205,1.539,207,1.976,208,1.651,209,1.651,210,1.651,211,1.651,212,1.976,213,1.651,214,1.651,215,1.651,216,2.429,217,1.651,218,1.439,219,1.651,220,1.651,221,1.539,222,1.651]],["title/classes/SendLogRequestDto.html",[35,0.446,378,2.136]],["body/classes/SendLogRequestDto.html",[8,0.024,12,0.269,13,0.177,14,0.238,20,0.747,34,0.269,35,0.64,36,0.017,37,0.017,41,0.37,42,0.924,51,1.529,55,0.798,56,1.277,59,1.184,61,1.956,81,3.67,100,1.698,182,1.854,183,1.277,197,1.854,206,2.525,224,2.525,333,3.343,334,2.525,367,2.818,372,2.818,378,3.064,383,3.36,423,5.27,426,3.177,430,2.804,478,3.177,479,4.978,480,3.742,481,5.594,482,3.742,483,3.742,484,3.742]],["title/interfaces/Shards.html",[162,0.56,207,1.472]],["body/interfaces/Shards.html",[8,0.024,12,0.233,13,0.246,14,0.206,34,0.461,36,0.015,37,0.015,41,0.321,42,0.838,55,0.722,59,1.29,61,1.134,64,0.781,157,1.682,158,1.207,162,1.033,182,1.682,183,1.158,187,2.383,189,2.743,190,1.287,192,2.048,197,1.207,199,1.207,205,1.471,207,2.203,208,2.734,209,2.734,210,2.734,211,1.578,212,1.915,213,1.578,214,1.578,215,1.578,216,2.382,217,1.578,218,1.375,219,1.578,220,1.578,221,1.471,222,1.578]],["title/interfaces/Source.html",[13,0.164,162,0.56]],["body/interfaces/Source.html",[8,0.024,12,0.244,13,0.271,14,0.216,34,0.466,36,0.016,37,0.016,41,0.336,42,0.865,55,0.599,59,1.352,61,1.187,64,0.817,157,1.735,158,1.264,162,1.045,182,2.236,183,1.54,187,2.236,189,2.607,190,1.348,192,2.114,197,1.264,199,1.264,205,1.539,207,1.976,208,1.651,209,1.651,210,1.651,211,1.651,212,1.976,213,1.651,214,1.651,215,1.651,216,2.429,217,1.651,218,1.439,219,1.651,220,1.651,221,1.539,222,1.651]],["title/injectables/TimeExecutionInterceptor.html",[38,0.736,113,2.343]],["body/injectables/TimeExecutionInterceptor.html",[8,0.024,12,0.243,13,0.159,14,0.214,20,0.696,22,0.669,34,0.243,35,0.433,36,0.016,37,0.016,38,0.983,39,1.339,41,0.333,42,0.861,43,2.406,44,1.975,45,2.592,46,1.346,51,1.189,53,1.107,54,1.107,55,0.433,56,0.864,62,0.92,64,0.812,67,1.429,68,1.728,71,1.524,76,2.58,113,3.13,130,2.422,163,1.908,167,1.908,171,2.625,183,1.189,485,4.501,486,2.861,487,4.501,488,3.937,489,4.848,490,4.501,491,4.848,492,3.371,493,2.861,494,4.501,495,4.638,496,3.371,497,3.937,498,4.638,499,2.525,500,3.371,501,4.638,502,2.861,503,3.371,504,3.371,505,3.371,506,3.371,507,3.371,508,3.371]],["title/injectables/TimeoutInterceptor.html",[38,0.736,111,2.343]],["body/injectables/TimeoutInterceptor.html",[8,0.024,12,0.278,13,0.182,14,0.245,20,0.762,22,0.765,34,0.278,35,0.496,36,0.017,37,0.017,38,1.076,39,1.531,41,0.381,46,1.474,51,0.989,53,1.267,54,1.267,55,0.496,56,0.989,62,1.052,68,1.436,71,1.865,111,3.427,163,2.182,173,2.659,487,4.31,488,4.31,489,5.121,490,4.819,491,5.121,493,3.273,494,4.819,497,4.31,499,2.889,502,3.273,509,3.273,510,3.856,511,5.078,512,3.856,513,5.677,514,3.856,515,5.078,516,3.856,517,3.856,518,3.273]],["title/interfaces/Total.html",[162,0.56,187,1.293]],["body/interfaces/Total.html",[8,0.024,12,0.244,13,0.252,14,0.216,34,0.466,36,0.016,37,0.016,41,0.336,42,0.865,55,0.599,59,1.331,61,1.187,64,1.38,157,1.735,158,1.264,162,1.045,182,1.735,183,1.195,187,2.31,189,2.664,190,1.348,192,2.114,197,1.264,199,1.264,205,1.539,207,1.976,208,1.651,209,1.651,210,1.651,211,2.787,212,1.976,213,1.651,214,1.651,215,1.651,216,2.429,217,1.651,218,1.439,219,1.651,220,1.651,221,1.539,222,1.651]],["title/coverage.html",[519,4.017]],["body/coverage.html",[7,1.057,8,0.024,13,0.11,14,0.148,15,1.745,16,1.745,27,1.745,35,0.552,36,0.012,37,0.012,38,1.292,40,1.977,55,0.299,68,0.868,76,2.09,77,1.572,79,1.977,83,1.319,98,1.609,101,2.008,105,1.572,111,1.572,113,1.572,120,1.977,125,1.745,128,1.319,131,1.745,132,1.22,139,1.977,153,1.434,155,1.22,157,0.868,158,0.868,161,1.572,162,1.001,187,0.868,200,1.977,201,1.977,205,2.647,207,0.988,212,0.988,216,0.988,218,0.988,223,1.745,225,1.977,268,2.432,269,1.745,275,1.22,277,1.745,279,1.745,281,1.977,290,1.319,310,1.434,311,1.745,315,1.977,321,1.22,333,1.22,367,1.319,371,1.572,372,2.718,373,1.977,378,1.434,381,1.319,383,1.572,394,1.977,406,1.572,420,2.658,421,1.977,422,1.977,431,1.319,432,1.977,445,1.745,446,1.977,447,1.572,448,1.977,465,1.977,478,1.977,485,1.977,486,1.977,509,1.977,519,1.977,520,2.33,521,2.33,522,2.33,523,7.018,524,5.169,525,5.978,526,3.011,527,5.835,528,1.977,529,6.097,530,3.011,531,1.745,532,5.661,533,1.977,534,4.296,535,4.296,536,1.977,537,3.011,538,1.977,539,2.658,540,2.33,541,2.33]],["title/dependencies.html",[3,2.031,542,2.463]],["body/dependencies.html",[3,2.117,8,0.024,22,0.863,26,3.259,35,0.705,36,0.019,37,0.019,109,3.692,127,3.259,236,3.692,237,3.692,294,2.935,430,3.259,499,3.259,543,4.35,544,4.35,545,6.013,546,5.488,547,4.35,548,4.35,549,4.35,550,4.35,551,4.35,552,4.35,553,4.35,554,4.35,555,4.35,556,4.35,557,4.35,558,4.35,559,4.35,560,4.35,561,4.35,562,4.35]],["title/miscellaneous/enumerations.html",[563,1.642,564,3.543]],["body/miscellaneous/enumerations.html",[8,0.022,36,0.021,37,0.021,41,0.516,64,1.257,563,2.954,564,4.43,565,6.133,566,5.22,567,5.22,568,5.22,569,3.911]],["title/miscellaneous/functions.html",[563,1.642,570,3.543]],["body/miscellaneous/functions.html",[8,0.022,36,0.02,37,0.02,41,0.477,53,1.585,54,1.585,55,0.62,56,1.237,59,1.161,62,1.316,66,3.255,183,1.5,406,3.948,536,4.095,538,5.346,539,3.614,563,2.73,570,4.095,571,4.824,572,4.095,573,4.824,574,4.824,575,4.824]],["title/index.html",[41,0.287,576,2.901,577,2.901]],["body/index.html",[8,0.017,13,0.139,20,0.442,23,4.182,33,3.578,36,0.014,37,0.014,57,1.541,141,3.045,151,1.811,183,1.081,186,2.386,189,1.168,190,1.168,290,3.597,356,2.497,366,2.497,368,3.578,375,1.985,417,4.182,442,3.631,531,4.267,537,3.578,569,2.204,578,2.497,579,2.942,580,2.942,581,2.942,582,5.38,583,4.216,584,3.578,585,4.926,586,2.942,587,2.942,588,4.926,589,2.942,590,2.942,591,2.942,592,2.942,593,4.216,594,4.216,595,4.216,596,2.942,597,2.942,598,2.942,599,2.942,600,2.942,601,2.942,602,2.942,603,2.942,604,2.942,605,2.942,606,2.942,607,2.942,608,2.942,609,2.942,610,4.216,611,2.942,612,2.942,613,4.216,614,4.216,615,2.942,616,2.942,617,2.942,618,2.942,619,2.942,620,4.216,621,2.942,622,2.942,623,4.216,624,4.926,625,4.216,626,2.942,627,2.942,628,2.942,629,4.926,630,4.216,631,2.942,632,4.216,633,2.942,634,2.942,635,2.942,636,2.942,637,2.942,638,2.942,639,2.942,640,2.942,641,2.942,642,2.942,643,4.926,644,2.942,645,2.942,646,2.942,647,2.942,648,2.942,649,2.942,650,2.942,651,2.942,652,2.942,653,2.942,654,2.942,655,2.942,656,2.942,657,2.942,658,2.942,659,2.942,660,2.942,661,2.942,662,2.942,663,2.942,664,2.942]],["title/modules.html",[2,2.007]],["body/modules.html",[1,2.643,2,1.98,8,0.019,36,0.019,37,0.019,86,3.151,90,2.445,91,2.874,92,2.643,93,2.643,124,2.874,665,6.646,666,6.646,667,6.646,668,6.854,669,5.735,670,5.735]],["title/overview.html",[671,4.017]],["body/overview.html",[1,3.403,2,1.304,3,2.117,4,2.61,5,2.61,6,2.61,7,2.805,8,0.024,9,2.463,10,1.741,11,1.741,36,0.015,37,0.015,39,1.221,78,1.61,83,2.858,86,4.555,87,2.61,88,2.61,89,2.61,90,3.033,91,4.092,92,3.635,93,3.727,124,3.107,199,1.145,224,2.075,306,2.61,308,2.61,309,2.61,310,3.805,321,3.237,381,3.499,388,2.61,389,2.61,391,2.61,431,2.858,457,2.61,458,2.61,459,2.61,460,2.61,671,2.61,672,3.075,673,4.351,674,3.075,675,3.075]],["title/properties.html",[42,0.775,542,2.463]],["body/properties.html",[8,0.023,36,0.021,37,0.021,42,0.969,578,4.43,676,5.22,677,5.22,678,5.22,679,5.22,680,5.22]],["title/miscellaneous/variables.html",[563,1.642,681,3.543]],["body/miscellaneous/variables.html",[8,0.024,27,3.26,32,2.075,36,0.015,37,0.015,41,0.304,55,0.773,59,0.61,64,1.489,67,2.622,71,1.429,98,1.395,116,2.936,119,2.304,125,2.304,128,1.741,131,3.26,132,1.61,134,2.304,136,2.61,138,2.075,155,2.278,173,2.278,175,1.61,185,2.61,268,2.463,269,3.26,274,2.61,275,2.644,277,4.112,279,3.26,280,2.61,282,2.61,288,2.61,290,2.463,298,2.61,317,2.61,324,2.61,325,2.61,327,4.112,375,2.075,442,2.936,518,2.61,526,2.61,528,4.285,530,2.61,531,3.26,533,2.61,539,2.304,563,1.741,569,2.304,572,2.61,584,2.61,681,2.61,682,3.075,683,4.351,684,4.351,685,3.075,686,3.075,687,5.489,688,3.075,689,3.075,690,3.075,691,3.075,692,3.075,693,3.075,694,3.075,695,3.075,696,3.075]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":677,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":185,"title":{},"body":{"injectables/DbService.html":{},"miscellaneous/variables.html":{}}}],["10",{"_index":674,"title":{},"body":{"overview.html":{}}}],["11",{"_index":675,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":673,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":362,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["4.17.21",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["4gb",{"_index":633,"title":{},"body":{"index.html":{}}}],["7",{"_index":672,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["8.3.4",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":192,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_index",{"_index":213,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_score",{"_index":214,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_shards",{"_index":222,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["_source",{"_index":215,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["acknowledge",{"_index":593,"title":{},"body":{"index.html":{}}}],["admin",{"_index":288,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["analyse",{"_index":615,"title":{},"body":{"index.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["app.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":1,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules.html":{},"overview.html":{}}}],["appconfigservice",{"_index":7,"title":{"injectables/AppConfigService.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"overview.html":{}}}],["appcontroller",{"_index":77,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":86,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":83,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":649,"title":{},"body":{"index.html":{}}}],["argumentshost",{"_index":232,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["async",{"_index":135,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["author",{"_index":680,"title":{},"body":{"properties.html":{}}}],["available",{"_index":670,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":634,"title":{},"body":{"index.html":{}}}],["await",{"_index":169,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["better",{"_index":604,"title":{},"body":{"index.html":{}}}],["body",{"_index":147,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"controllers/KafkaProducerController.html":{},"interfaces/LogSearchResult.html":{}}}],["body.ts",{"_index":421,"title":{},"body":{"interfaces/LogBody.html":{},"coverage.html":{}}}],["bool",{"_index":179,"title":{},"body":{"injectables/DbService.html":{}}}],["boolean",{"_index":221,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaConsumerService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["bootstrap",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brokers",{"_index":300,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["brokerslist",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":668,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":665,"title":{},"body":{"modules.html":{}}}],["buildpostman",{"_index":638,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":491,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["can't",{"_index":353,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["careful",{"_index":628,"title":{},"body":{"index.html":{}}}],["catch",{"_index":172,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["catch((error",{"_index":365,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["catch(exception",{"_index":229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":238,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":512,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror(err",{"_index":517,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["choise",{"_index":619,"title":{},"body":{"index.html":{}}}],["choose",{"_index":585,"title":{},"body":{"index.html":{}}}],["ciimportant",{"_index":627,"title":{},"body":{"index.html":{}}}],["class",{"_index":35,"title":{"classes/HttpExceptionFilter.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":224,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{},"overview.html":{}}}],["client",{"_index":282,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["client.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{}}}],["client.module.ts",{"_index":269,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.module.ts:15",{"_index":272,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["client.service",{"_index":276,"title":{},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["client.service.ts",{"_index":281,"title":{},"body":{"injectables/KafkaClientService.html":{},"coverage.html":{}}}],["client.service.ts:12",{"_index":291,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:21",{"_index":289,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:25",{"_index":287,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:7",{"_index":292,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client.service.ts:8",{"_index":286,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["client/constant",{"_index":278,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["client/constant.ts",{"_index":533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["client/kafka",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":298,"title":{},"body":{"injectables/KafkaClientService.html":{},"miscellaneous/variables.html":{}}}],["cluster_appconfigmodule",{"_index":4,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_exports",{"_index":6,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_providers",{"_index":5,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule",{"_index":306,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule_exports",{"_index":308,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaconsumermodule_imports",{"_index":307,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["cluster_kafkaconsumermodule_providers",{"_index":309,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule",{"_index":388,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule_exports",{"_index":389,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_kafkaproducermodule_imports",{"_index":390,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["cluster_kafkaproducermodule_providers",{"_index":391,"title":{},"body":{"modules/KafkaProducerModule.html":{},"overview.html":{}}}],["cluster_logsmodule",{"_index":457,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_exports",{"_index":460,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_imports",{"_index":458,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["cluster_logsmodule_providers",{"_index":459,"title":{},"body":{"modules/LogsModule.html":{},"overview.html":{}}}],["code",{"_index":254,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["compose",{"_index":637,"title":{},"body":{"index.html":{}}}],["config",{"_index":57,"title":{},"body":{"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"index.html":{}}}],["config.get('elasticsearch')?.node",{"_index":137,"title":{},"body":{"modules/DbModule.html":{}}}],["config.module.ts",{"_index":17,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["config.service",{"_index":24,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["config.service.ts",{"_index":40,"title":{},"body":{"injectables/AppConfigService.html":{},"coverage.html":{}}}],["config.service.ts:10",{"_index":60,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:14",{"_index":65,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:6",{"_index":52,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config/app",{"_index":16,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["configmodule",{"_index":25,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configmodule.forroot",{"_index":30,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":50,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["connect",{"_index":346,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["connected",{"_index":352,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["connecttoconsumer",{"_index":318,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["connecttoconsumer(topic",{"_index":323,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["const",{"_index":130,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["constructor",{"_index":48,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["constructor(@inject('dbserviceinterface",{"_index":439,"title":{},"body":{"injectables/LogProvider.html":{}}}],["constructor(config",{"_index":49,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/KafkaClientService.html":{}}}],["constructor(dbservice",{"_index":434,"title":{},"body":{"injectables/LogProvider.html":{}}}],["constructor(elasticsearchservice",{"_index":142,"title":{},"body":{"injectables/DbService.html":{}}}],["constructor(kafkaclientservice",{"_index":320,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["constructor(logprovider",{"_index":466,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(private",{"_index":70,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{}}}],["consumemessage",{"_index":316,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer",{"_index":317,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["consumer.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.module.ts",{"_index":312,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["consumer.service",{"_index":313,"title":{},"body":{"modules/KafkaConsumerModule.html":{}}}],["consumer.service.ts",{"_index":315,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["consumer.service.ts:11",{"_index":332,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:12",{"_index":322,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:20",{"_index":328,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:33",{"_index":326,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer.service.ts:60",{"_index":329,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["consumer/kafka",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["container",{"_index":636,"title":{},"body":{"index.html":{}}}],["context",{"_index":493,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["context.gethandler()?.name",{"_index":500,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["contrasts",{"_index":607,"title":{},"body":{"index.html":{}}}],["controller",{"_index":76,"title":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{},"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["controller('logs",{"_index":454,"title":{},"body":{"controllers/LogsController.html":{}}}],["controller('producer",{"_index":385,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["controllers",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["core/app",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["core/config",{"_index":28,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["core/interceptors/time",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["core/interceptors/timeout.interceptor",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["core/kafka",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{}}}],["correct",{"_index":653,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":519,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpu",{"_index":662,"title":{},"body":{"index.html":{}}}],["crashing",{"_index":635,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":239,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":242,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":241,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":186,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["data.key",{"_index":414,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["database",{"_index":583,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":501,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["dbmodule",{"_index":124,"title":{"modules/DbModule.html":{}},"body":{"modules/DbModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["dbprovider",{"_index":131,"title":{},"body":{"modules/DbModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbservice",{"_index":128,"title":{"injectables/DbService.html":{}},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"injectables/LogProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbserviceinterface",{"_index":132,"title":{"interfaces/DbServiceInterface.html":{}},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/KafkaProducerController.html":{},"classes/LogDto.html":{},"controllers/LogsController.html":{},"classes/SendLogRequestDto.html":{}}}],["default",{"_index":67,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":51,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["delete",{"_index":415,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":656,"title":{},"body":{"index.html":{}}}],["description",{"_index":578,"title":{},"body":{"index.html":{},"properties.html":{}}}],["design",{"_index":650,"title":{},"body":{"index.html":{}}}],["desktop",{"_index":631,"title":{},"body":{"index.html":{}}}],["detailmessage",{"_index":257,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["dev",{"_index":569,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development_local",{"_index":568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":624,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["dynamicmodule",{"_index":273,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["e",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["eachmessage",{"_index":355,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["easily",{"_index":648,"title":{},"body":{"index.html":{}}}],["elastic",{"_index":584,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["elastic/elasticsearch",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch",{"_index":531,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["elasticsearchmodule",{"_index":126,"title":{},"body":{"modules/DbModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":133,"title":{},"body":{"modules/DbModule.html":{}}}],["elasticsearchservice",{"_index":143,"title":{},"body":{"injectables/DbService.html":{}}}],["end",{"_index":171,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["entity",{"_index":157,"title":{"interfaces/Entity.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["enumerations",{"_index":564,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envconfig",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment_types",{"_index":565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":173,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["err.message",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err_uuid",{"_index":261,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error",{"_index":175,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"miscellaneous/variables.html":{}}}],["errormessage",{"_index":259,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception",{"_index":234,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":245,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":244,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":226,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execution",{"_index":504,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["execution.interceptor",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["execution.interceptor.ts",{"_index":486,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["execution.interceptor.ts:6",{"_index":496,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["execution.interceptor.ts:8",{"_index":492,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["executioncontext",{"_index":489,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["export",{"_index":34,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{}}}],["exports",{"_index":19,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["express",{"_index":236,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":479,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["factoryprovider",{"_index":274,"title":{},"body":{"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":210,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["features/kafka",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{}}}],["features/logs/log.provider",{"_index":464,"title":{},"body":{"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["features/logs/logs.controller",{"_index":462,"title":{},"body":{"modules/LogsModule.html":{}}}],["features/logs/logs.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["features/logs/logs.service",{"_index":335,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{}}}],["fields",{"_index":181,"title":{},"body":{"injectables/DbService.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["finalconfig",{"_index":27,"title":{},"body":{"modules/AppConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["frombeginning",{"_index":325,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":537,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["functionalities",{"_index":581,"title":{},"body":{"index.html":{}}}],["functionname",{"_index":182,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["functions",{"_index":570,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtionname",{"_index":194,"title":{},"body":{"injectables/DbService.html":{}}}],["get(':input",{"_index":450,"title":{},"body":{"controllers/LogsController.html":{}}}],["get(key",{"_index":58,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getadmin",{"_index":283,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["getclient",{"_index":284,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["geterrormessage",{"_index":155,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["geterrormessage(err",{"_index":176,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["geterrormessage(error",{"_index":369,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["gethello",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":576,"title":{"index.html":{}},"body":{}}],["global",{"_index":21,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["globalconfig",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goes",{"_index":608,"title":{},"body":{"index.html":{}}}],["good",{"_index":618,"title":{},"body":{"index.html":{}}}],["graph",{"_index":669,"title":{},"body":{"modules.html":{}}}],["groupid",{"_index":324,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"miscellaneous/variables.html":{}}}],["h._id",{"_index":193,"title":{},"body":{"injectables/DbService.html":{}}}],["h:mm:ss:ms",{"_index":266,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["h?._source?.functionname",{"_index":195,"title":{},"body":{"injectables/DbService.html":{}}}],["h?._source?.message",{"_index":196,"title":{},"body":{"injectables/DbService.html":{}}}],["h?._source?.payload",{"_index":198,"title":{},"body":{"injectables/DbService.html":{}}}],["handlergeneralexception",{"_index":406,"title":{},"body":{"injectables/KafkaProducerService.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handlergeneralexception(e",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlergeneralexception(err",{"_index":419,"title":{},"body":{"injectables/KafkaProducerService.html":{},"injectables/LogsService.html":{}}}],["hello",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["hit",{"_index":212,"title":{"interfaces/Hit.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["hits",{"_index":216,"title":{"interfaces/Hits.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["horizontalpodautoscaler",{"_index":659,"title":{},"body":{"index.html":{}}}],["host",{"_index":231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":240,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":586,"title":{},"body":{"index.html":{}}}],["http://esone:9200",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":223,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["id",{"_index":473,"title":{},"body":{"injectables/LogsService.html":{}}}],["identifier",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["if(controller",{"_index":506,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["implement",{"_index":597,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":645,"title":{},"body":{"index.html":{}}}],["implements",{"_index":163,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"index.html":{}}}],["imports",{"_index":29,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["increase",{"_index":629,"title":{},"body":{"index.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexlog",{"_index":166,"title":{},"body":{"injectables/DbService.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{}}}],["inherited",{"_index":481,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["inject",{"_index":138,"title":{},"body":{"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"injectables/LogProvider.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":39,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"overview.html":{}}}],["injection",{"_index":587,"title":{},"body":{"index.html":{}}}],["input",{"_index":452,"title":{},"body":{"controllers/LogsController.html":{}}}],["insert",{"_index":140,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{}}}],["insert(body",{"_index":145,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{}}}],["installation",{"_index":620,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":518,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["instances",{"_index":661,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":487,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["intercept(context",{"_index":488,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["interface",{"_index":162,"title":{"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["interface.ts",{"_index":201,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"coverage.html":{}}}],["interface.ts:4",{"_index":202,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["interface.ts:6",{"_index":203,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["interfaces",{"_index":199,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"overview.html":{}}}],["isglobal",{"_index":31,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["isobject",{"_index":428,"title":{},"body":{"classes/LogDto.html":{}}}],["isobject()@isoptional",{"_index":426,"title":{},"body":{"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["isoptional",{"_index":429,"title":{},"body":{"classes/LogDto.html":{}}}],["isstring",{"_index":423,"title":{},"body":{"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["it's",{"_index":616,"title":{},"body":{"index.html":{}}}],["json.parse(message?.value.tostring",{"_index":358,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["json.stringify",{"_index":361,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["json.stringify(data",{"_index":418,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["json.stringify(err",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka",{"_index":290,"title":{},"body":{"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["kafka:9092",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kafka_client_registration",{"_index":277,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientmodule",{"_index":90,"title":{"modules/KafkaClientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaclientmodule.registerasync",{"_index":314,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{}}}],["kafkaclientregistration",{"_index":279,"title":{},"body":{"modules/KafkaClientModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientservice",{"_index":275,"title":{"injectables/KafkaClientService.html":{}},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["kafkaclientservice.register",{"_index":280,"title":{},"body":{"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["kafkaconfigclient",{"_index":295,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.brokerslist",{"_index":301,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.brokerslist?.join",{"_index":304,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigclient?.clientid",{"_index":299,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["kafkaconfigconsumer",{"_index":336,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.frombeginning",{"_index":341,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.groupid",{"_index":339,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconfigconsumer?.topic",{"_index":338,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["kafkaconsumermodule",{"_index":91,"title":{"modules/KafkaConsumerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaconsumerservice",{"_index":310,"title":{"injectables/KafkaConsumerService.html":{}},"body":{"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{},"overview.html":{}}}],["kafkajs",{"_index":294,"title":{},"body":{"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"dependencies.html":{}}}],["kafkaproducercontroller",{"_index":371,"title":{"controllers/KafkaProducerController.html":{}},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"coverage.html":{}}}],["kafkaproducermodule",{"_index":92,"title":{"modules/KafkaProducerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules.html":{},"overview.html":{}}}],["kafkaproducerservice",{"_index":381,"title":{"injectables/KafkaProducerService.html":{}},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":61,"title":{},"body":{"injectables/AppConfigService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["kubernetes",{"_index":657,"title":{},"body":{"index.html":{}}}],["license",{"_index":678,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":206,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{}}}],["livenesscheck",{"_index":507,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["load",{"_index":33,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["lodash",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":367,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["log_pipeline",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logbody",{"_index":153,"title":{"interfaces/LogBody.html":{}},"body":{"injectables/DbService.html":{},"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["logdto",{"_index":333,"title":{"classes/LogDto.html":{}},"body":{"injectables/KafkaConsumerService.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["logdto:12",{"_index":484,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logdto:5",{"_index":482,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logdto:8",{"_index":483,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["logger",{"_index":45,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["logger(appconfigservice.name",{"_index":69,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["logger(dbservice.name",{"_index":152,"title":{},"body":{"injectables/DbService.html":{}}}],["logger(httpexceptionfilter.name",{"_index":227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(kafkaclientservice.name",{"_index":293,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["logger(kafkaconsumerservice.name",{"_index":331,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["logger(kafkaproducerservice.name",{"_index":400,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["logger(logprovider.name",{"_index":438,"title":{},"body":{"injectables/LogProvider.html":{}}}],["logger(logsservice.name",{"_index":470,"title":{},"body":{"injectables/LogsService.html":{}}}],["logger(timeexecutioninterceptor.name",{"_index":495,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["logprovider",{"_index":431,"title":{"injectables/LogProvider.html":{}},"body":{"injectables/LogProvider.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["logs",{"_index":442,"title":{},"body":{"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logs.postman_collection.json",{"_index":639,"title":{},"body":{"index.html":{}}}],["logscontroller",{"_index":447,"title":{"controllers/LogsController.html":{}},"body":{"controllers/LogsController.html":{},"modules/LogsModule.html":{},"coverage.html":{}}}],["logsearchresult",{"_index":445,"title":{"interfaces/LogSearchResult.html":{}},"body":{"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["logsmodule",{"_index":93,"title":{"modules/LogsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["logsservice",{"_index":321,"title":{"injectables/LogsService.html":{}},"body":{"injectables/KafkaConsumerService.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["lose",{"_index":590,"title":{},"body":{"index.html":{}}}],["managed",{"_index":664,"title":{},"body":{"index.html":{}}}],["matching",{"_index":37,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max_score",{"_index":217,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["memory",{"_index":630,"title":{},"body":{"index.html":{}}}],["message",{"_index":183,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["message.message",{"_index":250,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.code",{"_index":255,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.detailmessage",{"_index":258,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.err_uuid",{"_index":262,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.error",{"_index":251,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.errormessage",{"_index":260,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.message",{"_index":267,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["message?.zoomerror",{"_index":252,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["messages",{"_index":417,"title":{},"body":{"injectables/KafkaProducerService.html":{},"index.html":{}}}],["metadata",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["minimum_should_match",{"_index":184,"title":{},"body":{"injectables/DbService.html":{}}}],["miscellaneous",{"_index":563,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":237,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["moment().format('mmmm",{"_index":264,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["mongo",{"_index":617,"title":{},"body":{"index.html":{}}}],["multi_match",{"_index":180,"title":{},"body":{"injectables/DbService.html":{}}}],["name",{"_index":54,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":621,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":497,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["nestjs",{"_index":655,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":26,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":127,"title":{},"body":{"modules/DbModule.html":{},"injectables/DbService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":68,"title":{},"body":{"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["next",{"_index":490,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["next.handle().pipe",{"_index":502,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["node",{"_index":136,"title":{},"body":{"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":644,"title":{},"body":{"index.html":{}}}],["npm",{"_index":626,"title":{},"body":{"index.html":{}}}],["null",{"_index":330,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["number",{"_index":189,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"index.html":{}}}],["object",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":494,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{}}}],["offline",{"_index":589,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":319,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["open",{"_index":596,"title":{},"body":{"index.html":{}}}],["optional",{"_index":56,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["overview",{"_index":671,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":542,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parallelization",{"_index":602,"title":{},"body":{"index.html":{}}}],["param",{"_index":453,"title":{},"body":{"controllers/LogsController.html":{}}}],["parameters",{"_index":53,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["partition",{"_index":356,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["partitions",{"_index":601,"title":{},"body":{"index.html":{}}}],["password",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":248,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":197,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["perfect",{"_index":610,"title":{},"body":{"index.html":{}}}],["pipeline",{"_index":579,"title":{},"body":{"index.html":{}}}],["pod",{"_index":660,"title":{},"body":{"index.html":{}}}],["post",{"_index":379,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["postman",{"_index":642,"title":{},"body":{"index.html":{}}}],["powerfull",{"_index":614,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":374,"title":{},"body":{"controllers/KafkaProducerController.html":{},"controllers/LogsController.html":{}}}],["private",{"_index":43,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["process",{"_index":606,"title":{},"body":{"index.html":{}}}],["process.env[key",{"_index":75,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["produce",{"_index":647,"title":{},"body":{"index.html":{}}}],["producer",{"_index":375,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["producer.controller",{"_index":393,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["producer.controller.ts",{"_index":373,"title":{},"body":{"controllers/KafkaProducerController.html":{},"coverage.html":{}}}],["producer.controller.ts:10",{"_index":380,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["producer.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["producer.module.ts",{"_index":392,"title":{},"body":{"modules/KafkaProducerModule.html":{}}}],["producer.service",{"_index":382,"title":{},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{}}}],["producer.service.ts",{"_index":394,"title":{},"body":{"injectables/KafkaProducerService.html":{},"coverage.html":{}}}],["producer.service.ts:11",{"_index":401,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:12",{"_index":395,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:16",{"_index":397,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:24",{"_index":396,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer.service.ts:35",{"_index":399,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["producer/dtos/log.dto",{"_index":334,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"classes/SendLogRequestDto.html":{}}}],["producer/dtos/log.dto.ts",{"_index":422,"title":{},"body":{"classes/LogDto.html":{},"coverage.html":{}}}],["producer/dtos/log.dto.ts:12",{"_index":427,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/log.dto.ts:5",{"_index":424,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/log.dto.ts:8",{"_index":425,"title":{},"body":{"classes/LogDto.html":{}}}],["producer/dtos/send",{"_index":383,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["producer/kafka",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{}}}],["project",{"_index":641,"title":{},"body":{"index.html":{}}}],["promise",{"_index":148,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{}}}],["properties",{"_index":42,"title":{"properties.html":{}},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"properties.html":{}}}],["provide",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":18,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{}}}],["pub/sub",{"_index":595,"title":{},"body":{"index.html":{}}}],["query",{"_index":178,"title":{},"body":{"injectables/DbService.html":{}}}],["queue",{"_index":582,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["received",{"_index":360,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["recordmetadata",{"_index":402,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["reflect",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":285,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["registerasync",{"_index":271,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["registered",{"_index":303,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["registry",{"_index":599,"title":{},"body":{"index.html":{}}}],["relation",{"_index":211,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["request",{"_index":235,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.dto",{"_index":384,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{}}}],["request.dto.ts",{"_index":478,"title":{},"body":{"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["request.dto.ts:6",{"_index":480,"title":{},"body":{"classes/SendLogRequestDto.html":{}}}],["request.url",{"_index":249,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["requesttimeoutexception",{"_index":511,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["response",{"_index":168,"title":{},"body":{"injectables/DbService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["response.status(status).json",{"_index":253,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response?._id",{"_index":474,"title":{},"body":{"injectables/LogsService.html":{}}}],["response?.hits?.hits?.map((h",{"_index":191,"title":{},"body":{"injectables/DbService.html":{}}}],["response?.hits?.total",{"_index":188,"title":{},"body":{"injectables/DbService.html":{}}}],["result",{"_index":190,"title":{},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"index.html":{}}}],["result.ts",{"_index":446,"title":{},"body":{"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["results",{"_index":36,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retention",{"_index":605,"title":{},"body":{"index.html":{}}}],["return",{"_index":71,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":62,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":658,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":640,"title":{},"body":{"index.html":{}}}],["rootobjectsearchresult",{"_index":218,"title":{"interfaces/RootObjectSearchResult.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["run",{"_index":625,"title":{},"body":{"index.html":{}}}],["running",{"_index":623,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":499,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"dependencies.html":{}}}],["save",{"_index":366,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["saved",{"_index":475,"title":{},"body":{"injectables/LogsService.html":{}}}],["savelog",{"_index":433,"title":{},"body":{"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["savelog(data",{"_index":364,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["scalability",{"_index":651,"title":{},"body":{"index.html":{}}}],["scale",{"_index":654,"title":{},"body":{"index.html":{}}}],["schema",{"_index":598,"title":{},"body":{"index.html":{}}}],["search",{"_index":141,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["search(@param('input",{"_index":455,"title":{},"body":{"controllers/LogsController.html":{}}}],["search(input",{"_index":449,"title":{},"body":{"controllers/LogsController.html":{}}}],["search(text",{"_index":149,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["searchreturn",{"_index":158,"title":{"interfaces/SearchReturn.html":{}},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["send",{"_index":376,"title":{},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{}}}],["send(@body",{"_index":386,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["send(body",{"_index":377,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["send(data",{"_index":398,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["sendlogrequestdto",{"_index":378,"title":{"classes/SendLogRequestDto.html":{}},"body":{"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["server",{"_index":588,"title":{},"body":{"index.html":{}}}],["service",{"_index":161,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"coverage.html":{}}}],["services/db/db.module",{"_index":463,"title":{},"body":{"modules/LogsModule.html":{}}}],["services/db/db.service",{"_index":129,"title":{},"body":{"modules/DbModule.html":{}}}],["services/db/interfaces",{"_index":159,"title":{},"body":{"injectables/DbService.html":{}}}],["services/db/interfaces/db",{"_index":160,"title":{},"body":{"injectables/DbService.html":{},"injectables/LogProvider.html":{}}}],["services/db/interfaces/index",{"_index":204,"title":{},"body":{"interfaces/DbServiceInterface.html":{}}}],["services/db/interfaces/log",{"_index":154,"title":{},"body":{"injectables/DbService.html":{},"interfaces/LogSearchResult.html":{}}}],["services/kafka",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{}}}],["setconfig",{"_index":47,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["setconfig(key",{"_index":63,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["setting:${key",{"_index":74,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["shards",{"_index":207,"title":{"interfaces/Shards.html":{}},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["skipped",{"_index":209,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["source",{"_index":13,"title":{"interfaces/Source.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/DbModule.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"index.html":{}}}],["sql",{"_index":609,"title":{},"body":{"index.html":{}}}],["src/.../config.constant.ts",{"_index":566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.ts",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db.module.ts",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dev.config.ts",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../kafka",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../utils.ts",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/app",{"_index":15,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["src/core/config/config.constant.ts",{"_index":567,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/config/config.ts",{"_index":526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/config/dev.config.ts",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/http.exception.filter.ts",{"_index":225,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.exception.filter.ts:7",{"_index":228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/filters/http.exception.filter.ts:9",{"_index":233,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/interceptors/time",{"_index":485,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":509,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:7",{"_index":510,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/kafka",{"_index":268,"title":{},"body":{"modules/KafkaClientModule.html":{},"injectables/KafkaClientService.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/features/kafka",{"_index":372,"title":{},"body":{"controllers/KafkaProducerController.html":{},"modules/KafkaProducerModule.html":{},"injectables/KafkaProducerService.html":{},"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{},"coverage.html":{}}}],["src/features/logs/log.provider.ts",{"_index":432,"title":{},"body":{"injectables/LogProvider.html":{},"coverage.html":{}}}],["src/features/logs/log.provider.ts:12",{"_index":436,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/log.provider.ts:24",{"_index":437,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/log.provider.ts:8",{"_index":435,"title":{},"body":{"injectables/LogProvider.html":{}}}],["src/features/logs/logs.controller.ts",{"_index":448,"title":{},"body":{"controllers/LogsController.html":{},"coverage.html":{}}}],["src/features/logs/logs.controller.ts:8",{"_index":451,"title":{},"body":{"controllers/LogsController.html":{}}}],["src/features/logs/logs.module.ts",{"_index":461,"title":{},"body":{"modules/LogsModule.html":{}}}],["src/features/logs/logs.service.ts",{"_index":465,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/features/logs/logs.service.ts:12",{"_index":468,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/features/logs/logs.service.ts:24",{"_index":469,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/features/logs/logs.service.ts:8",{"_index":467,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":536,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/services/db/db.module.ts",{"_index":125,"title":{},"body":{"modules/DbModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/db/db.service.ts",{"_index":139,"title":{},"body":{"injectables/DbService.html":{},"coverage.html":{}}}],["src/services/db/db.service.ts:10",{"_index":144,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/db.service.ts:14",{"_index":146,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/db.service.ts:29",{"_index":150,"title":{},"body":{"injectables/DbService.html":{}}}],["src/services/db/interfaces/db",{"_index":200,"title":{},"body":{"interfaces/DbServiceInterface.html":{},"coverage.html":{}}}],["src/services/db/interfaces/index.ts",{"_index":205,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["src/services/db/interfaces/log",{"_index":420,"title":{},"body":{"interfaces/LogBody.html":{},"interfaces/LogSearchResult.html":{},"coverage.html":{}}}],["src/services/kafka",{"_index":311,"title":{},"body":{"modules/KafkaConsumerModule.html":{},"injectables/KafkaConsumerService.html":{},"coverage.html":{}}}],["src/shared/utils",{"_index":156,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["src/shared/utils.ts",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":167,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"injectables/TimeExecutionInterceptor.html":{}}}],["started",{"_index":577,"title":{"index.html":{}},"body":{}}],["start}ms",{"_index":505,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["statements",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":270,"title":{},"body":{"modules/KafkaClientModule.html":{}}}],["status",{"_index":243,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":247,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["still",{"_index":591,"title":{},"body":{"index.html":{}}}],["storing",{"_index":611,"title":{},"body":{"index.html":{}}}],["string",{"_index":59,"title":{},"body":{"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"injectables/KafkaConsumerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["successful",{"_index":208,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["support",{"_index":666,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":667,"title":{},"body":{"modules.html":{}}}],["table",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":498,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["test",{"_index":643,"title":{},"body":{"index.html":{}}}],["text",{"_index":151,"title":{},"body":{"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["this.appservice.gethello",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["this.client",{"_index":297,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.client.admin",{"_index":305,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.config.get('kafka')?.client",{"_index":296,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.config.get('kafka')?.consumer",{"_index":337,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.config.get('kafka')?.producer?.topic",{"_index":413,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.config.get(key",{"_index":72,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.connect",{"_index":407,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.connecttoconsumer(topic",{"_index":340,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumemessage",{"_index":342,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer",{"_index":348,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.connect",{"_index":350,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.run",{"_index":354,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.consumer.subscribe",{"_index":351,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.dbservice.insert(data",{"_index":441,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.dbservice.search(text",{"_index":444,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.elasticsearchservice.index",{"_index":170,"title":{},"body":{"injectables/DbService.html":{}}}],["this.elasticsearchservice.search",{"_index":177,"title":{},"body":{"injectables/DbService.html":{}}}],["this.kafkaclientservice.getclient().consumer",{"_index":349,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.kafkaclientservice.getclient().producer",{"_index":411,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.kafkaproducerservice.send(body",{"_index":387,"title":{},"body":{"controllers/KafkaProducerController.html":{}}}],["this.logger.error",{"_index":246,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["this.logger.error(`dbservice",{"_index":174,"title":{},"body":{"injectables/DbService.html":{}}}],["this.logger.error(`kafkaconsumerservice",{"_index":343,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logger.error(`kafkaproducerservice",{"_index":408,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.logger.error(`logprovider",{"_index":443,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.logger.error(`logsservice",{"_index":476,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logger.log",{"_index":344,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["this.logger.log('appconfigservice",{"_index":73,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.logger.log(`dbservice",{"_index":165,"title":{},"body":{"injectables/DbService.html":{}}}],["this.logger.log(`kafkaclientservice",{"_index":302,"title":{},"body":{"injectables/KafkaClientService.html":{}}}],["this.logger.log(`kafkaconsumerservice",{"_index":357,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logger.log(`kafkaproducerservice",{"_index":409,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.logger.log(`logprovider",{"_index":440,"title":{},"body":{"injectables/LogProvider.html":{}}}],["this.logger.log(`logsservice",{"_index":471,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logger.log(`timeexecutioninterceptor",{"_index":508,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["this.logger.warn",{"_index":370,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logprovider.savelog(data",{"_index":472,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logprovider.search(text",{"_index":477,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":363,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["this.logsservice.search(input",{"_index":456,"title":{},"body":{"controllers/LogsController.html":{}}}],["this.producer",{"_index":410,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.producer.connect",{"_index":412,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["this.producer.send",{"_index":416,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["throwerror",{"_index":513,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["time",{"_index":503,"title":{},"body":{"injectables/TimeExecutionInterceptor.html":{}}}],["timed_out",{"_index":220,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["timeexecutioninterceptor",{"_index":113,"title":{"injectables/TimeExecutionInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeExecutionInterceptor.html":{},"coverage.html":{}}}],["timeout",{"_index":514,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(60000",{"_index":516,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":515,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":111,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":263,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["took",{"_index":219,"title":{},"body":{"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{}}}],["topic",{"_index":327,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"miscellaneous/variables.html":{}}}],["topics",{"_index":347,"title":{},"body":{"injectables/KafkaConsumerService.html":{}}}],["total",{"_index":187,"title":{"interfaces/Total.html":{}},"body":{"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"interfaces/LogSearchResult.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"interfaces/Total.html":{},"coverage.html":{}}}],["transformer",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":32,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":164,"title":{},"body":{"injectables/DbService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["trying",{"_index":345,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{}}}],["two",{"_index":580,"title":{},"body":{"index.html":{}}}],["type",{"_index":55,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/DbServiceInterface.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"controllers/KafkaProducerController.html":{},"injectables/KafkaProducerService.html":{},"interfaces/LogBody.html":{},"classes/LogDto.html":{},"injectables/LogProvider.html":{},"interfaces/LogSearchResult.html":{},"controllers/LogsController.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"classes/SendLogRequestDto.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"interfaces/Total.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types/uuid",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["unknown",{"_index":359,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{}}}],["unlicensed",{"_index":679,"title":{},"body":{"properties.html":{}}}],["unstructured",{"_index":612,"title":{},"body":{"index.html":{}}}],["until",{"_index":592,"title":{},"body":{"index.html":{}}}],["up",{"_index":632,"title":{},"body":{"index.html":{}}}],["use",{"_index":594,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":134,"title":{},"body":{"modules/DbModule.html":{},"modules/KafkaClientModule.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usevalue",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["utilisation",{"_index":663,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":405,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["uuidv4",{"_index":404,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["v4",{"_index":403,"title":{},"body":{"injectables/KafkaProducerService.html":{}}}],["validationpipe",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":430,"title":{},"body":{"classes/LogDto.html":{},"classes/SendLogRequestDto.html":{},"dependencies.html":{}}}],["value",{"_index":64,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/DbService.html":{},"interfaces/Entity.html":{},"interfaces/Hit.html":{},"interfaces/Hits.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"injectables/KafkaConsumerService.html":{},"injectables/KafkaProducerService.html":{},"injectables/LogProvider.html":{},"injectables/LogsService.html":{},"interfaces/RootObjectSearchResult.html":{},"interfaces/SearchReturn.html":{},"interfaces/Shards.html":{},"interfaces/Source.html":{},"injectables/TimeExecutionInterceptor.html":{},"interfaces/Total.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":681,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":676,"title":{},"body":{"properties.html":{}}}],["very",{"_index":613,"title":{},"body":{"index.html":{}}}],["via",{"_index":368,"title":{},"body":{"injectables/KafkaConsumerService.html":{},"index.html":{}}}],["void",{"_index":66,"title":{},"body":{"injectables/AppConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KafkaClientService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":652,"title":{},"body":{"index.html":{}}}],["way",{"_index":646,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["work",{"_index":600,"title":{},"body":{"index.html":{}}}],["works",{"_index":603,"title":{},"body":{"index.html":{}}}],["world",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you're",{"_index":622,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":265,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/KafkaConsumerModule.html":{},"modules/KafkaProducerModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["zoomerror",{"_index":256,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_providers\n\n\n\ncluster_AppConfigModule_exports\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/app-config/app-config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { AppConfigService } from './app-config.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { finalConfig } from '@core/config';\n\n@Global()\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            load: [finalConfig],\n        }),\n    ],\n    providers: [AppConfigService],\n    exports: [AppConfigService],\n})\nexport class AppConfigModule {}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppConfigService.html":{"url":"injectables/AppConfigService.html","title":"injectable - AppConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/app-config/app-config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                setConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/app-config/app-config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/app-config/app-config.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setConfig\n                        \n                    \n                \n            \n            \n                \nsetConfig(key: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/app-config/app-config.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AppConfigService.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/app-config/app-config.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class AppConfigService {\n    private readonly logger = new Logger(AppConfigService.name);\n\n    constructor(private config: ConfigService) {}\n\n    get(key: string) {\n        return this.config.get(key);\n    }\n\n    setConfig(key: string, value: any) {\n        this.logger.log('AppConfigService | setConfig', `setConfig | setting:${key}`);\n        process.env[key] = value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\nAppModule -->\n\nKafkaClientModule->AppModule\n\n\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nAppModule -->\n\nKafkaConsumerModule->AppModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nAppModule -->\n\nKafkaProducerModule->AppModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            KafkaClientModule\n                        \n                        \n                            KafkaConsumerModule\n                        \n                        \n                            KafkaProducerModule\n                        \n                        \n                            LogsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { KafkaClientModule } from '@core/kafka-client/kafka-client.module';\nimport { KafkaProducerModule } from '@features/kafka-producer/kafka-producer.module';\nimport { AppConfigModule } from '@core/app-config';\nimport { KafkaConsumerModule } from '@services/kafka-consumer/kafka-consumer.module';\nimport {APP_INTERCEPTOR, APP_PIPE} from '@nestjs/core';\nimport { LogsModule } from '@features/logs/logs.module';\nimport {TimeoutInterceptor} from \"@core/interceptors/timeout.interceptor\";\nimport {TimeExecutionInterceptor} from \"@core/interceptors/time-execution.interceptor\";\n\n@Module({\n    imports: [KafkaClientModule, KafkaProducerModule, AppConfigModule, KafkaConsumerModule, LogsModule],\n    controllers: [AppController],\n    providers: [\n        AppService,\n        {\n            provide: APP_PIPE,\n            useValue: new ValidationPipe({ whitelist: true }),\n        },\n        { provide: APP_INTERCEPTOR, useClass: TimeExecutionInterceptor },\n        { provide: APP_INTERCEPTOR, useClass: TimeoutInterceptor },\n    ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { AppConfigModule, AppConfigService } from '@core/app-config';\nimport { DbService } from '@services/db/db.service';\n\nconst dbProvider = {\n    provide: 'DbServiceInterface',\n    useClass: DbService,\n};\n\n@Module({\n    imports: [\n        ElasticsearchModule.registerAsync({\n            imports: [AppConfigModule],\n            useFactory: async (config: AppConfigService) => ({\n                    node: config.get('ELASTICSEARCH')?.node,\n                },\n            inject: [AppConfigService],\n        }),\n    ],\n    providers: [dbProvider],\n    exports: [ElasticsearchModule, dbProvider],\n})\nexport class DbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DbService.html":{"url":"injectables/DbService.html","title":"injectable - DbService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DbService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/db.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticSearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/services/db/db.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticSearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(body: any, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/db.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/db.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DbService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/db/db.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport { LogBody } from '@services/db/interfaces/log-body';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { Entity, SearchReturn } from '@services/db/interfaces';\nimport { DbServiceInterface } from '@services/db/interfaces/db-service-interface';\n\n@Injectable()\nexport class DbService implements DbServiceInterface {\n    private readonly logger = new Logger(DbService.name);\n\n    constructor(private readonly elasticSearchService: ElasticsearchService) {}\n\n    async insert(body: any, index: string): Promise {\n        try {\n            this.logger.log(`DbService | indexLog | start`);\n\n            const response = await this.elasticSearchService.index({\n                index: index,\n                body,\n            });\n            this.logger.log(`DbService | indexLog | end`);\n            return response;\n        } catch (err) {\n            this.logger.error(`DbService | indexLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string, index: string): Promise {\n        try {\n            this.logger.log(`DbService | search | start`);\n\n            const response = await this.elasticSearchService.search({\n                index: index,\n                body: {\n                    query: {\n                        bool: {\n                            should: [\n                                {\n                                    multi_match: {\n                                        query: text,\n                                        fields: ['functionName', 'message'],\n                                    },\n                                },\n                            ],\n                            minimum_should_match: 1,\n                        },\n                    },\n                },\n            });\n            const data: SearchReturn = {\n                total: response?.hits?.total as number,\n                result: response?.hits?.hits?.map((h) => {\n                    return {\n                        _id: h._id,\n                        funtionName: h?._source?.functionName,\n                        message: h?._source?.message,\n                        payload: h?._source?.payload,\n                    };\n                }),\n            };\n\n            this.logger.log(`DbService | search | end`);\n            return data;\n        } catch (err) {\n            this.logger.error(`DbService | search | error - ${getErrorMessage(err)}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbServiceInterface.html":{"url":"interfaces/DbServiceInterface.html","title":"interface - DbServiceInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbServiceInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/db-service-interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        search\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(body: any, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/interfaces/db-service-interface.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(text: string, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/db/interfaces/db-service-interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Entity, SearchReturn } from '@services/db/interfaces/index';\n\nexport interface DbServiceInterface {\n    insert(body: any, index: string): Promise;\n\n    search(text: string, index: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Entity.html":{"url":"interfaces/Entity.html","title":"interface - Entity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Entity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            functionName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hit.html":{"url":"interfaces/Hit.html","title":"interface - Hit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Hit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            _index\n                                        \n                                \n                                \n                                        \n                                            _score\n                                        \n                                \n                                \n                                        \n                                            _source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _source:         Source\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Source\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Hits.html":{"url":"interfaces/Hits.html","title":"interface - Hits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Hits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            max_score\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:         Hit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max_score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         Total\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Total\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(HttpExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/filters/http.exception.filter.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.exception.filter.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException, Logger } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport moment from 'moment';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    private readonly logger = new Logger(HttpExceptionFilter.name);\n\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n        const message = exception.getResponse() as any;\n\n        this.logger.error(\n            `HttpExceptionFilter | catch | [statusCode]: ${status} - [path]: ${request.url} - [message]: ${message.message} - [error]: ${message?.error}`,\n        );\n        if (message?.zoomError) {\n            response.status(status).json({\n                code: message?.code,\n                status: status,\n                message: {\n                    code: message?.code,\n                    statusCode: status,\n                    zoomError: true,\n                    detailMessage: message?.detailMessage,\n                    errorMessage: message?.errorMessage,\n                    err_uuid: message?.err_uuid,\n                },\n            });\n        } else {\n            response.status(status).json({\n                statusCode: status,\n                timestamp: moment().format('MMMM Do YYYY, h:mm:ss:ms a'),\n                path: request.url,\n                message: message?.message,\n                error: message?.error,\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaClientModule.html":{"url":"modules/KafkaClientModule.html","title":"module - KafkaClientModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/kafka-client/kafka-client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, FactoryProvider, Module } from '@nestjs/common';\nimport { KafkaClientService } from '@core/kafka-client/kafka-client.service';\nimport { KAFKA_CLIENT_REGISTRATION } from '@core/kafka-client/constant';\n\nexport const KafkaClientRegistration: FactoryProvider = {\n    provide: KAFKA_CLIENT_REGISTRATION,\n    useFactory: (kafkaClientService: KafkaClientService) => {\n        return kafkaClientService.register();\n    },\n    inject: [KafkaClientService],\n};\n\n@Module({})\nexport class KafkaClientModule {\n    static registerAsync(): DynamicModule {\n        return {\n            module: KafkaClientModule,\n            providers: [KafkaClientService, KafkaClientRegistration],\n            exports: [KafkaClientService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaClientService.html":{"url":"injectables/KafkaClientService.html","title":"injectable - KafkaClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/kafka-client/kafka-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAdmin\n                            \n                            \n                                getClient\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AppConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/kafka-client/kafka-client.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAdmin\n                        \n                    \n                \n            \n            \n                \ngetAdmin()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Admin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Kafka\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister()\n                \n            \n\n\n            \n                \n                    Defined in src/core/kafka-client/kafka-client.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Kafka\n\n                    \n                \n                    \n                        \n                                Defined in src/core/kafka-client/kafka-client.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaClientService.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/kafka-client/kafka-client.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Admin, Kafka } from 'kafkajs';\nimport { AppConfigService } from '@core/app-config';\n\n@Injectable()\nexport class KafkaClientService {\n    private client: Kafka;\n    private readonly logger = new Logger(KafkaClientService.name);\n\n    constructor(private readonly config: AppConfigService) {}\n\n    register(): void {\n        const kafkaConfigClient = this.config.get('KAFKA')?.client;\n        this.client = new Kafka({\n            clientId: kafkaConfigClient?.clientId,\n            brokers: kafkaConfigClient?.brokersList,\n        });\n        this.logger.log(`KafkaClientService is registered, for brokers: ${kafkaConfigClient?.brokersList?.join(', ')}`);\n    }\n\n    getClient(): Kafka {\n        return this.client;\n    }\n\n    getAdmin(): Admin {\n        return this.client.admin();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaConsumerModule.html":{"url":"modules/KafkaConsumerModule.html","title":"module - KafkaConsumerModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaConsumerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KafkaConsumerModule\n\n\n\ncluster_KafkaConsumerModule_imports\n\n\n\ncluster_KafkaConsumerModule_exports\n\n\n\ncluster_KafkaConsumerModule_providers\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nKafkaConsumerModule -->\n\nKafkaClientModule->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaConsumerModule -->\n\nKafkaProducerModule->KafkaConsumerModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nKafkaConsumerModule -->\n\nLogsModule->KafkaConsumerModule\n\n\n\n\n\nKafkaConsumerService \n\nKafkaConsumerService \n\nKafkaConsumerService  -->\n\nKafkaConsumerModule->KafkaConsumerService \n\n\n\n\n\nKafkaConsumerService\n\nKafkaConsumerService\n\nKafkaConsumerModule -->\n\nKafkaConsumerService->KafkaConsumerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/kafka-consumer/kafka-consumer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaConsumerService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            KafkaClientModule\n                        \n                        \n                            KafkaProducerModule\n                        \n                        \n                            LogsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KafkaConsumerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaClientModule } from '@core/kafka-client/kafka-client.module';\nimport { KafkaProducerModule } from '@features/kafka-producer/kafka-producer.module';\nimport { KafkaConsumerService } from '@services/kafka-consumer/kafka-consumer.service';\nimport { LogsModule } from '@features/logs/logs.module';\n\n@Module({\n    imports: [KafkaClientModule.registerAsync(), KafkaProducerModule, LogsModule],\n    providers: [KafkaConsumerService],\n    exports: [KafkaConsumerService],\n})\nexport class KafkaConsumerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaConsumerService.html":{"url":"injectables/KafkaConsumerService.html","title":"injectable - KafkaConsumerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaConsumerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/kafka-consumer/kafka-consumer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                consumeMessage\n                            \n                            \n                                    Private\n                                consumer\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToConsumer\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafkaClientService: KafkaClientService, config: AppConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafkaClientService\n                                                  \n                                                        \n                                                                        KafkaClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectToConsumer\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectToConsumer(topic: string, groupId: string, fromBeginning: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/services/kafka-consumer/kafka-consumer.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fromBeginning\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/services/kafka-consumer/kafka-consumer.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        consumeMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        consumer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Consumer\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaConsumerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/kafka-consumer/kafka-consumer.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { KafkaClientService } from '@core/kafka-client/kafka-client.service';\nimport { Consumer } from 'kafkajs';\nimport { AppConfigService } from '@core/app-config';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { LogsService } from '@features/logs/logs.service';\n\n@Injectable()\nexport class KafkaConsumerService implements OnModuleInit {\n    private readonly logger = new Logger(KafkaConsumerService.name);\n    private consumer: Consumer = null;\n\n    constructor(\n        private readonly kafkaClientService: KafkaClientService,\n        private readonly config: AppConfigService,\n        private readonly logsService: LogsService,\n    ) {}\n\n    async onModuleInit(): Promise {\n        try {\n            const kafkaConfigConsumer = this.config.get('KAFKA')?.consumer;\n            const topic = kafkaConfigConsumer?.topic;\n            const groupId = kafkaConfigConsumer?.groupId;\n\n            await this.connectToConsumer(topic, groupId, kafkaConfigConsumer?.fromBeginning);\n            await this.consumeMessage();\n        } catch (err) {\n            this.logger.error(`KafkaConsumerService | onModuleInit | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async connectToConsumer(topic: string, groupId: string, fromBeginning: boolean) {\n        try {\n            this.logger.log(\n                `KafkaConsumerService | connectToConsumer |  kafka consumer is trying to connect to topics: ${topic} as groupId: ${groupId}`,\n            );\n\n            this.consumer = this.kafkaClientService.getClient().consumer({\n                groupId,\n            });\n\n            await this.consumer.connect();\n            await this.consumer.subscribe({\n                topic,\n                fromBeginning,\n            });\n            this.logger.log(\n                `KafkaConsumerService | connectToConsumer | kafka consumer is connected to topics: ${topic} as groupId: ${groupId}`,\n            );\n        } catch (err) {\n            this.logger.error(\n                `KafkaConsumerService | connectToConsumer | kafka consumer can't connect to topic: ${topic} - error - ${getErrorMessage(\n                    err,\n                )}`,\n            );\n        }\n    }\n\n    consumeMessage = async () => {\n        await this.consumer.run({\n            eachMessage: async ({ topic, message, partition }) => {\n                try {\n                    this.logger.log(`KafkaConsumerService | consumeMessage | start`);\n\n                    const data = JSON.parse(message?.value.toString()) as unknown as LogDto;\n                    this.logger.log(\n                        `KafkaConsumerService | consumeMessage |  end - new message received from topics: ${topic}, from partition: ${partition}, message: ${JSON.stringify(\n                            data,\n                            null,\n                            4,\n                        )}`,\n                    );\n                    this.logsService\n                        .saveLog(data)\n                        .catch((error) =>\n                            this.logger.error(\n                                `KafkaConsumerService | consumeMessage | error when save log via logsService - ${getErrorMessage(error)}`,\n                            ),\n                        );\n                } catch (err) {\n                    this.logger.warn(\n                        `KafkaConsumerService | consumeMessage | error when new message received from topics: ${topic}, from partition: ${partition}, error: ${getErrorMessage(\n                            err,\n                        )}`,\n                    );\n                }\n            },\n        });\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KafkaProducerController.html":{"url":"controllers/KafkaProducerController.html","title":"controller - KafkaProducerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KafkaProducerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                producer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        send\n                        \n                    \n                \n            \n            \n                \nsend(body: SendLogRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SendLogRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { KafkaProducerService } from '@features/kafka-producer/kafka-producer.service';\nimport { SendLogRequestDto } from '@features/kafka-producer/dtos/send-log-request.dto';\n\n@Controller('producer')\nexport class KafkaProducerController {\n    constructor(private readonly kafkaProducerService: KafkaProducerService) {}\n\n    @Post()\n    send(@Body() body: SendLogRequestDto): Promise {\n        return this.kafkaProducerService.send(body);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KafkaProducerModule.html":{"url":"modules/KafkaProducerModule.html","title":"module - KafkaProducerModule","body":"\n                   \n\n\n\n\n    Modules\n    KafkaProducerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KafkaProducerModule\n\n\n\ncluster_KafkaProducerModule_exports\n\n\n\ncluster_KafkaProducerModule_imports\n\n\n\ncluster_KafkaProducerModule_providers\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaProducerModule -->\n\nKafkaClientModule->KafkaProducerModule\n\n\n\n\n\nKafkaProducerService \n\nKafkaProducerService \n\nKafkaProducerService  -->\n\nKafkaProducerModule->KafkaProducerService \n\n\n\n\n\nKafkaProducerService\n\nKafkaProducerService\n\nKafkaProducerModule -->\n\nKafkaProducerService->KafkaProducerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KafkaProducerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KafkaProducerController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            KafkaClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KafkaProducerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KafkaProducerController } from '@features/kafka-producer/kafka-producer.controller';\nimport { KafkaClientModule } from '@src/core/kafka-client/kafka-client.module';\nimport { KafkaProducerService } from '@features/kafka-producer/kafka-producer.service';\n\n@Module({\n    imports: [KafkaClientModule.registerAsync()],\n    controllers: [KafkaProducerController],\n    providers: [KafkaProducerService],\n    exports: [KafkaProducerService],\n})\nexport class KafkaProducerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KafkaProducerService.html":{"url":"injectables/KafkaProducerService.html","title":"injectable - KafkaProducerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KafkaProducerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/kafka-producer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                producer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(kafkaClientService: KafkaClientService, config: AppConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        kafkaClientService\n                                                  \n                                                        \n                                                                        KafkaClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect()\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(data: SendLogRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/kafka-producer/kafka-producer.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendLogRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(KafkaProducerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        producer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Producer\n\n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/kafka-producer.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Producer, RecordMetadata } from 'kafkajs';\nimport { KafkaClientService } from '@src/core/kafka-client/kafka-client.service';\nimport { AppConfigService } from '@core/app-config';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getErrorMessage, handlerGeneralException } from '@src/shared/utils';\nimport { SendLogRequestDto } from '@features/kafka-producer/dtos/send-log-request.dto';\n\n@Injectable()\nexport class KafkaProducerService implements OnModuleInit {\n    private readonly logger = new Logger(KafkaProducerService.name);\n    private producer: Producer;\n\n    constructor(private readonly kafkaClientService: KafkaClientService, private readonly config: AppConfigService) {}\n\n    async onModuleInit(): Promise {\n        try {\n            await this.connect();\n        } catch (err) {\n            this.logger.error(`KafkaProducerService | onModuleInit | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    private async connect() {\n        try {\n            this.logger.log(`KafkaProducerService | connect | kafka producer is trying to connect`);\n            this.producer = this.kafkaClientService.getClient().producer();\n            await this.producer.connect();\n            this.logger.log(`KafkaProducerService | connect | kafka producer is connected`);\n        } catch (err) {\n            this.logger.error(`KafkaProducerService | connect | kafka producer can't connect - error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async send(data: SendLogRequestDto): Promise {\n        try {\n            const topic = this.config.get('KAFKA')?.producer?.topic;\n            const key = data.key ? data.key : uuidv4();\n            delete data.key;\n\n            this.logger.log(\n                `KafkaProducerService | send | start - send message to the the topic: ${topic} - key: ${key} - message: ${JSON.stringify(\n                    data,\n                )}`,\n            );\n\n            const response = await this.producer.send({\n                topic: topic,\n                messages: [{ key, value: JSON.stringify(data) }],\n            });\n            this.logger.log(\n                `KafkaProducerService | send | end - send message to the the topic: ${topic} - key: ${key} - message: ${JSON.stringify(\n                    data,\n                )}`,\n            );\n            return response;\n        } catch (err) {\n            const topic = this.config.get('KAFKA')?.producer?.topic;\n\n            this.logger.error(\n                `KafkaProducerService | send | error - send message to the the topic: ${topic} - message: ${JSON.stringify(\n                    data,\n                )} - error: ${getErrorMessage(err)}`,\n            );\n            handlerGeneralException(err);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogBody.html":{"url":"interfaces/LogBody.html","title":"interface - LogBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/log-body.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            functionName\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LogBody {\n    functionName: string;\n    message: string;\n    payload?: { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogDto.html":{"url":"classes/LogDto.html","title":"class - LogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/dtos/log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                functionName\n                            \n                            \n                                message\n                            \n                            \n                                    Optional\n                                payload\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/log.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from 'class-validator';\n\nexport class LogDto {\n    @IsString()\n    functionName: string;\n\n    @IsString()\n    message: string;\n\n    @IsObject()\n    @IsOptional()\n    payload?: { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogProvider.html":{"url":"injectables/LogProvider.html","title":"injectable - LogProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/log.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                saveLog\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dbService: DbServiceInterface)\n                    \n                \n                        \n                            \n                                Defined in src/features/logs/log.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dbService\n                                                  \n                                                        \n                                                                        DbServiceInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLog(data: LogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/log.provider.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/log.provider.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LogProvider.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/logs/log.provider.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { getErrorMessage } from '@src/shared/utils';\nimport { DbServiceInterface } from '@services/db/interfaces/db-service-interface';\n\n@Injectable()\nexport class LogProvider {\n    private readonly logger = new Logger(LogProvider.name);\n\n    constructor(@Inject('DbServiceInterface') private readonly dbService: DbServiceInterface) {}\n\n    async saveLog(data: LogDto) {\n        try {\n            this.logger.log(`LogProvider | saveLog | start`);\n            const response = await this.dbService.insert(data, 'logs');\n            this.logger.log(`LogProvider | saveLog | end`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogProvider | saveLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string) {\n        try {\n            this.logger.log(`LogProvider | search | start`);\n            const response = await this.dbService.search(text, 'logs');\n            this.logger.log(`LogProvider | search | end`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogProvider | search | error - ${getErrorMessage(err)}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogSearchResult.html":{"url":"interfaces/LogSearchResult.html","title":"interface - LogSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/log-result.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         LogBody[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogBody[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LogBody } from '@services/db/interfaces/log-body';\n\nexport interface LogSearchResult {\n    total: number;\n    result: LogBody[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LogsController.html":{"url":"controllers/LogsController.html","title":"controller - LogsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LogsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/logs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                logs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(input: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':input')\n                \n            \n\n            \n                \n                    Defined in src/features/logs/logs.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { LogsService } from '@features/logs/logs.service';\n\n@Controller('logs')\nexport class LogsController {\n    constructor(private readonly logsService: LogsService) {}\n    @Get(':input')\n    search(@Param('input') input: string) {\n        return this.logsService.search(input);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogsModule.html":{"url":"modules/LogsModule.html","title":"module - LogsModule","body":"\n                   \n\n\n\n\n    Modules\n    LogsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogsModule\n\n\n\ncluster_LogsModule_imports\n\n\n\ncluster_LogsModule_providers\n\n\n\ncluster_LogsModule_exports\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nLogsModule\n\nLogsModule\n\nLogsModule -->\n\nDbModule->LogsModule\n\n\n\n\n\nLogsService \n\nLogsService \n\nLogsService  -->\n\nLogsModule->LogsService \n\n\n\n\n\nLogProvider\n\nLogProvider\n\nLogsModule -->\n\nLogProvider->LogsModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/features/logs/logs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LogProvider\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LogsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LogsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LogsController } from '@features/logs/logs.controller';\nimport { LogsService } from '@features/logs/logs.service';\nimport { DbModule } from '@services/db/db.module';\nimport { LogProvider } from '@features/logs/log.provider';\n\n@Module({\n    imports: [DbModule],\n    controllers: [LogsController],\n    providers: [LogsService, LogProvider],\n    exports: [LogsService],\n})\nexport class LogsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/logs/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                saveLog\n                            \n                            \n                                    Async\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logProvider: LogProvider)\n                    \n                \n                        \n                            \n                                Defined in src/features/logs/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logProvider\n                                                  \n                                                        \n                                                                        LogProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveLog(data: LogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/logs.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                LogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/features/logs/logs.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LogsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/features/logs/logs.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { getErrorMessage, handlerGeneralException } from '@src/shared/utils';\nimport { LogProvider } from '@features/logs/log.provider';\n\n@Injectable()\nexport class LogsService {\n    private readonly logger = new Logger(LogsService.name);\n\n    constructor(private readonly logProvider: LogProvider) {}\n\n    async saveLog(data: LogDto) {\n        try {\n            this.logger.log(`LogsService | saveLog | start`);\n            const response = await this.logProvider.saveLog(data);\n            this.logger.log(`LogsService | saveLog | end - log id ${response?._id} saved`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogsService | saveLog | error - ${getErrorMessage(err)}`);\n        }\n    }\n\n    async search(text: string) {\n        try {\n            this.logger.log(`LogsService | search | start to search ${text}`);\n            const response = await this.logProvider.search(text);\n            this.logger.log(`LogsService | search | end to search ${text}`);\n\n            return response;\n        } catch (err) {\n            this.logger.error(`LogsService | search | error - ${getErrorMessage(err)}`);\n            handlerGeneralException(err);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RootObjectSearchResult.html":{"url":"interfaces/RootObjectSearchResult.html","title":"interface - RootObjectSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RootObjectSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _shards\n                                        \n                                \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            timed_out\n                                        \n                                \n                                \n                                        \n                                            took\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _shards\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _shards:         Shards\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Shards\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:         Hits\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Hits\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timed_out\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timed_out:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        took\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        took:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchReturn.html":{"url":"interfaces/SearchReturn.html","title":"interface - SearchReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SearchReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         Entity[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Entity[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendLogRequestDto.html":{"url":"classes/SendLogRequestDto.html","title":"class - SendLogRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendLogRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/features/kafka-producer/dtos/send-log-request.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LogDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                functionName\n                            \n                            \n                                message\n                            \n                            \n                                    Optional\n                                payload\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/features/kafka-producer/dtos/send-log-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogDto:12\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LogDto } from '@features/kafka-producer/dtos/log.dto';\nimport { IsString } from 'class-validator';\n\nexport class SendLogRequestDto extends LogDto {\n    @IsString()\n    key: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Shards.html":{"url":"interfaces/Shards.html","title":"interface - Shards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Shards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            failed\n                                        \n                                \n                                \n                                        \n                                            skipped\n                                        \n                                \n                                \n                                        \n                                            successful\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        failed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        failed:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipped\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipped:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        successful\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        successful:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            functionName\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeExecutionInterceptor.html":{"url":"injectables/TimeExecutionInterceptor.html","title":"injectable - TimeExecutionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeExecutionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/time-execution.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/time-execution.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TimeExecutionInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/core/interceptors/time-execution.interceptor.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class TimeExecutionInterceptor implements NestInterceptor {\n    private readonly logger = new Logger(TimeExecutionInterceptor.name);\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const controller = context.getHandler()?.name;\n        const start = Date.now();\n        return next.handle().pipe(\n            tap(() => {\n                const end = Date.now();\n                const message = `[controller]: ${controller} - [time execution]: ${end - start}ms`;\n                if(controller !== 'livenessCheck')\n                    return this.logger.log(`TimeExecutionInterceptor | intercept | ${message}`);\n            }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {CallHandler, ExecutionContext, Injectable, NestInterceptor, RequestTimeoutException} from '@nestjs/common';\nimport {catchError, Observable, throwError, timeout, TimeoutError} from 'rxjs';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        return next.handle().pipe(\n            timeout(60000),\n            catchError(err => {\n                if (err instanceof TimeoutError) {\n                    return throwError(() => new RequestTimeoutException());\n                }\n                return throwError(() => err);\n            }),\n        );\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Total.html":{"url":"interfaces/Total.html","title":"interface - Total","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Total\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/db/interfaces/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            relation\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        relation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Entity {\n    _id: string;\n    functionName?: string;\n    message?: string;\n    payload?: { [key: string]: any };\n}\n\nexport interface SearchReturn {\n    total: number;\n    result: Entity[];\n}\n\nexport interface Shards {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n}\n\nexport interface Total {\n    value: number;\n    relation: string;\n}\n\nexport interface Source {\n    functionName: string;\n    message: string;\n}\n\nexport interface Hit {\n    _index: string;\n    _id: string;\n    _score: number;\n    _source: Source;\n}\n\nexport interface Hits {\n    total: Total;\n    max_score: number;\n    hits: Hit[];\n}\n\nexport interface RootObjectSearchResult {\n    took: number;\n    timed_out: boolean;\n    _shards: Shards;\n    hits: Hits;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/app-config/app-config.service.ts\n            \n            injectable\n            AppConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/config/config.ts\n            \n            variable\n            envConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/config.ts\n            \n            variable\n            finalConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/dev.config.ts\n            \n            variable\n            ELASTICSEARCH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/config/dev.config.ts\n            \n            variable\n            KAFKA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/http.exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/time-execution.interceptor.ts\n            \n            injectable\n            TimeExecutionInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/kafka-client/constant.ts\n            \n            variable\n            KAFKA_CLIENT_REGISTRATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/kafka-client/kafka-client.module.ts\n            \n            variable\n            KafkaClientRegistration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/kafka-client/kafka-client.service.ts\n            \n            injectable\n            KafkaClientService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/dtos/log.dto.ts\n            \n            class\n            LogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/dtos/send-log-request.dto.ts\n            \n            class\n            SendLogRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/kafka-producer.controller.ts\n            \n            controller\n            KafkaProducerController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/kafka-producer/kafka-producer.service.ts\n            \n            injectable\n            KafkaProducerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/features/logs/log.provider.ts\n            \n            injectable\n            LogProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/features/logs/logs.controller.ts\n            \n            controller\n            LogsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/features/logs/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/db/db.module.ts\n            \n            variable\n            dbProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/db/db.service.ts\n            \n            injectable\n            DbService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/db-service-interface.ts\n            \n            interface\n            DbServiceInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Entity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Hit\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Hits\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            RootObjectSearchResult\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            SearchReturn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Shards\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Source\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/index.ts\n            \n            interface\n            Total\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/log-body.ts\n            \n            interface\n            LogBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/db/interfaces/log-result.ts\n            \n            interface\n            LogSearchResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/kafka-consumer/kafka-consumer.service.ts\n            \n            injectable\n            KafkaConsumerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shared/utils.ts\n            \n            function\n            handlerGeneralException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/utils.ts\n            \n            variable\n            getErrorMessage\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @elastic/elasticsearch : ^8.2.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/elasticsearch : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @types/uuid : ^8.3.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            kafkajs : ^2.0.0\n        \n            lodash : ^4.17.21\n        \n            moment : ^2.29.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENVIRONMENT_TYPES   (src/.../config.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/config/config.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        ENVIRONMENT_TYPES\n                    \n                \n                        \n                            \n                                 DEVELOPMENT_LOCAL\n                            \n                        \n                        \n                            \n                                Value : dev\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            handlerGeneralException   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handlerGeneralException\n                        \n                    \n                \n            \n            \n                \nhandlerGeneralException(e: any, message?: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nThis app is a pipeline that has two functionalities:\n\nget some logs from queue (kafka), and save them in database (elastic search), \nsearch logs by some text\n\nWhy I choose queue rather than http for logs injection?\nIf our server is offline, we lose the messages, but with queue the messages will still be in the queue until we acknowledge them\nWhy I use Kafka rather than pub/sub?\n\nKafka is open source\nKafka can implement schema registry\nKafka work with partitions and parallelization works better\nKafka has retention process for messages, in contrasts with pub/sub when we acknowledge the message, it goes\n\n Why I choose Elasticsearch:\n\nElasticsearch is no-sql so it is perfect for storing unstructured data\nElasticsearch is very powerfull for search, and very powerfull for data analyse so it's perfect for logs\n But Mongo could be also a good choise\n\nInstallation\nNo installation is needed if you're running the app via docker. If not you can run:\nnpm ciImportant\nBe careful to increase your memory in docker desktop up to 4Gb to avoid crashing of elastic search container\nRunning the app\ndocker compose up --buildPostman\nYou can import logs.postman_collection.json (from root project ) to postman to test this server\nNote\nI Implemented a producer for kafka just for the dev, so you have a way to produce message to kafka easily\nArchitecture Design\n\n\nScalability\nKafka:\n\nif we want to get the correct scale we have to run load test and increase the number of partition in function of the load test result\n\nNestjs:\n\nwe can deploy our server via kubernetes, and choose the right config for HorizontalPodAutoscaler, so we can increase our pod instances in function of cpu or memory utilisation\n\nElasticsearch:\n\nabout elasticsearch we could use a managed database\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaConsumerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KafkaProducerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\ncluster_AppConfigModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_KafkaConsumerModule\n\n\n\ncluster_KafkaConsumerModule_exports\n\n\n\ncluster_KafkaConsumerModule_providers\n\n\n\ncluster_KafkaProducerModule\n\n\n\ncluster_KafkaProducerModule_exports\n\n\n\ncluster_KafkaProducerModule_providers\n\n\n\ncluster_LogsModule\n\n\n\ncluster_LogsModule_imports\n\n\n\ncluster_LogsModule_exports\n\n\n\ncluster_LogsModule_providers\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\nKafkaClientModule\n\nKafkaClientModule\n\n\n\nKafkaConsumerModule\n\nKafkaConsumerModule\n\nKafkaConsumerModule -->\n\nKafkaClientModule->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerModule\n\nKafkaProducerModule\n\nKafkaProducerModule -->\n\nKafkaClientModule->KafkaProducerModule\n\n\n\nAppModule -->\n\nKafkaClientModule->AppModule\n\n\n\nAppModule -->\n\nKafkaConsumerModule->AppModule\n\n\n\n\n\nKafkaConsumerService \n\nKafkaConsumerService \n\nKafkaConsumerService  -->\n\nKafkaConsumerModule->KafkaConsumerService \n\n\n\nKafkaConsumerModule -->\n\nKafkaProducerModule->KafkaConsumerModule\n\n\n\nAppModule -->\n\nKafkaProducerModule->AppModule\n\n\n\n\n\nKafkaProducerService \n\nKafkaProducerService \n\nKafkaProducerService  -->\n\nKafkaProducerModule->KafkaProducerService \n\n\n\n\n\nLogsModule\n\nLogsModule\n\nKafkaConsumerModule -->\n\nLogsModule->KafkaConsumerModule\n\n\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nLogsService \n\nLogsService \n\nLogsService  -->\n\nLogsModule->LogsService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nKafkaConsumerService\n\nKafkaConsumerService\n\nKafkaConsumerModule -->\n\nKafkaConsumerService->KafkaConsumerModule\n\n\n\n\n\nKafkaProducerService\n\nKafkaProducerService\n\nKafkaProducerModule -->\n\nKafkaProducerService->KafkaProducerModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nLogsModule -->\n\nDbModule->LogsModule\n\n\n\n\n\nLogProvider\n\nLogProvider\n\nLogsModule -->\n\nLogProvider->LogsModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dbProvider   (src/.../db.module.ts)\n                        \n                        \n                            ELASTICSEARCH   (src/.../dev.config.ts)\n                        \n                        \n                            envConfig   (src/.../config.ts)\n                        \n                        \n                            finalConfig   (src/.../config.ts)\n                        \n                        \n                            getErrorMessage   (src/.../utils.ts)\n                        \n                        \n                            KAFKA   (src/.../dev.config.ts)\n                        \n                        \n                            KAFKA_CLIENT_REGISTRATION   (src/.../constant.ts)\n                        \n                        \n                            KafkaClientRegistration   (src/.../kafka-client.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/db/db.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dbProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: 'DbServiceInterface',\n    useClass: DbService,\n}\n                    \n                \n\n\n        \n    \n\n    src/core/config/dev.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ELASTICSEARCH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    node: 'http://esOne:9200',\n    username: 'elastic',\n    password: 'admin',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        KAFKA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    client: {\n        clientId: 'log_pipeline',\n        brokersList: ['kafka:9092'],\n    },\n    consumer: {\n        groupId: 'dev-1',\n        topic: 'logs-topic',\n        fromBeginning: true,\n    },\n    producer: {\n        topic: 'logs-topic',\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/core/config/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envConfig\n                        \n                    \n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finalConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : { ...globalConfig, ...envConfig }\n                    \n                \n\n\n        \n    \n\n    src/shared/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getErrorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (err) => {\n    return err instanceof Error ? err.message : JSON.stringify(err);\n}\n                    \n                \n\n\n        \n    \n\n    src/core/kafka-client/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KAFKA_CLIENT_REGISTRATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'KAFKA_CLIENT_REGISTRATION'\n                    \n                \n\n\n        \n    \n\n    src/core/kafka-client/kafka-client.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KafkaClientRegistration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: KAFKA_CLIENT_REGISTRATION,\n    useFactory: (kafkaClientService: KafkaClientService) => {\n        return kafkaClientService.register();\n    },\n    inject: [KafkaClientService],\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
